=== FILE TREE ===
my-abiturient/
└── .gitignore
└── README.md
└── app/
    └── curator/
        └── admin/
            └── countries/
                └── page.tsx
        └── dashboard/
            └── page.tsx
        └── layout.tsx
        └── review/
            └── page.tsx
        └── student/
            └── [studentId]/
                └── page.tsx
        └── students/
            └── AddStudentModal.tsx
            └── page.tsx
    └── globals.css
    └── layout.tsx
    └── login/
        └── page.tsx
    └── page.tsx
    └── shared/
        └── AuthContext.tsx
        └── CountryContext.tsx
        └── CountrySwitcher.tsx
        └── Notifications.tsx
        └── ProgressContext.tsx
        └── Sidebar.tsx
    └── student/
        └── dashboard/
            └── page.tsx
        └── folder/
            └── page.tsx
        └── kanban/
            └── page.tsx
        └── layout.tsx
        └── programs/
            └── ProgramDetailModal.tsx
            └── page.tsx
        └── quests/
            └── QuestDetailModal.tsx
            └── page.tsx
└── c.py
└── eslint.config.mjs
└── mock/
    └── countries.json
    └── document_templates.json
    └── programs.json
    └── quest_templates.json
    └── student_progress.json
    └── students.json
    └── universities.json
    └── university_profiles.json
└── next-env.d.ts
└── next.config.ts
└── p.py
└── package.json
└── postcss.config.mjs
└── project_snapshot.txt
└── public/
└── tsconfig.json
└── tsconfig.tsbuildinfo
└── tz.md

=== CODE SNAPSHOT (libraries/build/lock files excluded) ===

--- BEGIN FILE: .gitignore ---
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
--- END FILE: .gitignore ---

--- BEGIN FILE: README.md ---
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
--- END FILE: README.md ---

--- BEGIN FILE: app/curator/admin/countries/page.tsx ---
"use client";
import { useEffect, useMemo, useState } from "react";
import baseCountries from "@/mock/countries.json";
import docs from "@/mock/document_templates.json";
import quests from "@/mock/quest_templates.json";
import type { CountryProfile } from "@/app/shared/CountryContext";

export default function CountriesConfigurator() {
  const [countries, setCountries] = useState<CountryProfile[]>(baseCountries as CountryProfile[]);
  const [currentId, setCurrentId] = useState<string>(countries[0]?.id || "at");
  const current = useMemo(() => countries.find((c) => c.id === currentId), [countries, currentId]);

  useEffect(() => {
    try {
      const raw = localStorage.getItem("countriesOverride");
      if (raw) {
        const parsed = JSON.parse(raw);
        if (Array.isArray(parsed)) {
          setCountries(parsed);
          if (parsed[0]?.id) setCurrentId(parsed[0].id);
        }
      }
    } catch {}
  }, []);

  const save = () => {
    localStorage.setItem("countriesOverride", JSON.stringify(countries));
    alert("Сохранено локально (mock). Перезагрузите студенческие страницы.");
  };

  const addCountry = () => {
    const id = prompt("ID страны (например, de):");
    const name = prompt("Название страны:");
    if (!id || !name) return;
    setCountries((prev) => [
      ...prev,
      { id, name, flag_icon: "🏳️", required_document_ids: [], required_quest_ids: [] },
    ]);
    setCurrentId(id);
  };

  const toggleId = (arr: number[], id: number, on: boolean) =>
    on ? Array.from(new Set([...arr, id])) : arr.filter((x) => x !== id);

  const setDoc = (id: number, on: boolean) => {
    if (!current) return;
    setCountries((prev) =>
      prev.map((c) =>
        c.id === current.id ? { ...c, required_document_ids: toggleId(c.required_document_ids, id, on) } : c
      )
    );
  };
  const setQuest = (id: number, on: boolean) => {
    if (!current) return;
    setCountries((prev) =>
      prev.map((c) =>
        c.id === current.id ? { ...c, required_quest_ids: toggleId(c.required_quest_ids, id, on) } : c
      )
    );
  };

  return (
    <div>
      <div className="mb-4">
        <h1 className="text-2xl font-semibold">Конфигуратор Стран</h1>
        <p className="text-zinc-600 dark:text-zinc-300">
          Управляйте правилами для каждой страны. Изменения сохраняются в localStorage (mock).
        </p>
      </div>
      <div className="grid sm:grid-cols-[18rem_1fr] gap-6">
        <aside className="card p-3">
          <div className="flex items-center justify-between mb-2">
            <div className="font-medium">Страны</div>
            <button className="btn btn-primary" onClick={addCountry}>+ Добавить</button>
          </div>
          <ul className="space-y-1">
            {countries.map((c) => (
              <li key={c.id}>
                <button
                  className={`w-full text-left px-3 py-2 rounded-lg ${
                    c.id === currentId ? "bg-black text-white dark:bg-white dark:text-black" : "hover:bg-black/5 dark:hover:bg-white/10"
                  }`}
                  onClick={() => setCurrentId(c.id)}
                >
                  {c.flag_icon} {c.name} <span className="text-xs opacity-60">({c.id})</span>
                </button>
              </li>
            ))}
          </ul>
        </aside>
        <div>
          {!current ? (
            <div>Выберите страну</div>
          ) : (
            <>
              <div className="mb-4">
                <div className="text-sm text-zinc-500">Редактор профиля</div>
                <div className="text-xl font-semibold">{current.flag_icon} {current.name}</div>
              </div>
              <div className="grid md:grid-cols-2 gap-6">
                <section>
                  <h2 className="font-semibold mb-2">Требуемые Документы</h2>
                  <div className="h-[360px] overflow-auto border rounded-xl p-3">
                    {docs.map((d) => {
                      const on = current.required_document_ids.includes(d.id);
                      return (
                        <label key={d.id} className="flex items-center gap-3 py-1">
                          <input type="checkbox" checked={on} onChange={(e) => setDoc(d.id, e.target.checked)} />
                          <span className="text-sm">{d.category} — {d.title} <span className="text-xs text-zinc-500">#{d.id}</span></span>
                        </label>
                      );
                    })}
                  </div>
                </section>
                <section>
                  <h2 className="font-semibold mb-2">Требуемые Квесты</h2>
                  <div className="h-[360px] overflow-auto border rounded-xl p-3">
                    {quests.map((q) => {
                      const on = current.required_quest_ids.includes(q.id);
                      return (
                        <label key={q.id} className="flex items-center gap-3 py-1">
                          <input type="checkbox" checked={on} onChange={(e) => setQuest(q.id, e.target.checked)} />
                          <span className="text-sm">{q.stage} — {q.title} <span className="text-xs text-zinc-500">#{q.id}</span></span>
                        </label>
                      );
                    })}
                  </div>
                </section>
              </div>
              <div className="mt-6">
                <button className="btn btn-primary" onClick={save}>Сохранить изменения</button>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
}
--- END FILE: app/curator/admin/countries/page.tsx ---

--- BEGIN FILE: app/curator/dashboard/page.tsx ---
"use client";
import Link from "next/link";
import allStudents from "@/mock/students.json";
import allProgress from "@/mock/student_progress.json";
import allQuests from "@/mock/quest_templates.json";
import allCountries from "@/mock/countries.json";
import { useMemo } from "react";

type StudentProgress = { [key: number]: { status: string } };

export default function CuratorDashboard() {

  const studentData = useMemo(() => {
    return allStudents.map(student => {
      const country = allCountries.find(c => c.id === student.country_id);
      if (!country) return { ...student, totalQuests: 0, completedQuests: 0, progressPercentage: 0, alerts: [], flag: '', countryName: '' };

      const requiredQuests = new Set(country.required_quest_ids);
      const studentProgress: StudentProgress = (allProgress as any)[student.id] || {};

      const completedQuests = Object.keys(studentProgress)
        .map(Number)
        .filter(questId => requiredQuests.has(questId) && studentProgress[questId].status === 'done');

      const onReviewQuests = Object.keys(studentProgress)
        .map(Number)
        .filter(questId => requiredQuests.has(questId) && studentProgress[questId].status === 'review');

      const progressPercentage = requiredQuests.size > 0 ? (completedQuests.length / requiredQuests.size) * 100 : 0;

      // Формируем "красные флаги"
      const alerts = [];
      if (onReviewQuests.length > 0) {
        alerts.push({ type: 'review', text: `На проверке: ${onReviewQuests.length} квеста` });
      }
      if (progressPercentage < 30) {
        alerts.push({ type: 'warning', text: 'Низкий прогресс' });
      }

      return {
        ...student,
        countryName: country.name,
        flag: country.flag_icon,
        totalQuests: requiredQuests.size,
        completedQuests: completedQuests.length,
        progressPercentage,
        alerts
      };
    });
  }, []);

  return (
    <div>
      <h1 className="text-2xl font-semibold">Панель Студентов</h1>
      <p className="text-zinc-600 dark:text-zinc-300 mb-6">Обзор прогресса всех активных студентов.</p>

      <div className="space-y-4">
        {studentData.map(student => (
          <Link key={student.id} href={`/curator/student/${student.id}`} className="card block p-4 hover:bg-black/5 dark:hover:bg-white/5 transition">
            <div className="flex items-center justify-between">
              <div>
                <div className="font-semibold">{student.name}</div>
                <div className="text-sm text-zinc-500">{student.flag} {student.countryName}</div>
              </div>
              <div className="flex items-center gap-4">
                <div className="text-right">
                  <div className="font-medium text-sm">Прогресс</div>
                  <div className="text-xs text-zinc-500">{student.completedQuests} / {student.totalQuests} квестов</div>
                </div>
                <div className="w-24">
                  <div className="w-full bg-zinc-200 dark:bg-zinc-700 rounded-full h-2">
                    <div className="bg-blue-600 h-2 rounded-full" style={{ width: `${student.progressPercentage}%` }}></div>
                  </div>
                </div>
              </div>
            </div>
            {student.alerts.length > 0 && (
              <div className="mt-3 flex items-center gap-2 border-t pt-2">
                {student.alerts.map((alert, index) => (
                  <span key={index} className={`text-xs px-2 py-1 rounded-full ${alert.type === 'review' ? 'bg-yellow-500/10 text-yellow-700' : 'bg-red-500/10 text-red-700'}`}>
                    {alert.text}
                  </span>
                ))}
              </div>
            )}
          </Link>
        ))}
      </div>
    </div>
  );
}
--- END FILE: app/curator/dashboard/page.tsx ---

--- BEGIN FILE: app/curator/layout.tsx ---
"use client";
import "../globals.css";
import { useAuth } from "../shared/AuthContext";
import Sidebar from "../shared/Sidebar";
import { useRouter } from "next/navigation";
import { useEffect } from "react";

export default function CuratorLayout({ children }: { children: React.ReactNode }) {
  const { user, loading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!loading && (!user || user.role !== "curator")) {
      router.replace("/login");
    }
  }, [user, loading, router]);

  if (loading || !user) return <div className="min-h-screen bg-zinc-50 dark:bg-black flex items-center justify-center">Проверка доступа...</div>;

  return (
    <div className="min-h-screen bg-zinc-50 dark:bg-black">
      <div className="container py-6">
        <div className="grid grid-cols-1 sm:grid-cols-[16rem_1fr] gap-6">
          <Sidebar />
          <main className="card p-4">{children}</main>
        </div>
      </div>
    </div>
  );
}
--- END FILE: app/curator/layout.tsx ---

--- BEGIN FILE: app/curator/review/page.tsx ---
"use client";
import { useCountry } from "@/app/shared/CountryContext";
import { useProgress } from "@/app/shared/ProgressContext";
import { useMemo, useState } from "react";

type CommentState = Record<number, string>;

// --- НОВОЕ: Иконка для кнопки "Отправить на доработку" ---
const RefreshIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M4 4v5h5M20 20v-5h-5M4 4l1.5 1.5A9 9 0 0120.5 10M20 20l-1.5-1.5A9 9 0 003.5 14" />
  </svg>
);

// --- НОВОЕ: Хелпер для определения, является ли строка именем файла ---
const isFileName = (submission: any): boolean => {
  if (typeof submission !== 'string') return false;
  // Проверяем на наличие популярных расширений файлов
  return /\.(pdf|jpg|jpeg|png|doc|docx)$/i.test(submission);
};

export default function ReviewPage() {
  const { quests } = useCountry();
  const { progress, approveQuest, requestChanges } = useProgress();
  const [comments, setComments] = useState<CommentState>({});

  const questsForReview = useMemo(() => {
    return Object.keys(progress)
      .map(Number)
      .filter(questId => progress[questId].status === 'review')
      .map(questId => quests.find(q => q.id === questId))
      .filter(Boolean); // отсеиваем undefined, если квест не найден
  }, [progress, quests]);

  const handleCommentChange = (questId: number, text: string) => {
    setComments(prev => ({ ...prev, [questId]: text }));
  };

  const handleRequestChanges = (questId: number) => {
    const comment = comments[questId];
    if (!comment) {
      alert("Пожалуйста, напишите комментарий для студента.");
      return;
    }
    requestChanges(questId, comment);
    setComments(prev => {
      const updated = { ...prev };
      delete updated[questId];
      return updated;
    });
  };

  return (
    <div>
      <div className="mb-6">
        <h1 className="text-2xl font-semibold">Ревью Задач</h1>
        <p className="text-zinc-600 dark:text-zinc-300">
          Здесь отображаются все задачи студентов, ожидающие вашей проверки.
        </p>
      </div>

      {questsForReview.length === 0 ? (
        <div className="text-center py-12">
          <div className="text-4xl mb-3">🎉</div>
          <h3 className="font-semibold">Все задачи проверены</h3>
          <p className="text-sm text-zinc-500">Новых задач на проверку пока нет.</p>
        </div>
      ) : (
        <div className="space-y-6">
          {questsForReview.map(quest => {
            if (!quest) return null;
            const submission = progress[quest.id]?.submission;
            return (
              <div key={quest.id} className="card p-5 bg-zinc-800/50 border border-zinc-700/50">
                <h3 className="font-semibold text-lg">{quest.title}</h3>
                <div className="text-xs text-zinc-400 mb-4">
                  {/* В будущем здесь будет имя студента */}
                  Отправлено: Студент 1
                </div>

                <div className="bg-zinc-900 rounded-lg p-3 text-sm mb-4">
                  <p className="font-medium text-zinc-400 mb-2">Прикрепленные данные:</p>
                  {isFileName(submission) ? (
                    <div className="flex items-center justify-between">
                        <span className="text-xs break-words font-mono text-zinc-300">{String(submission)}</span>
                        <div className="flex gap-3 shrink-0 ml-4">
                            <button onClick={() => alert(`Симуляция открытия файла: ${submission}`)} className="text-xs text-blue-400 hover:underline">Открыть</button>
                            <button onClick={() => alert(`Симуляция скачивания файла: ${submission}`)} className="text-xs text-blue-400 hover:underline">Скачать</button>
                        </div>
                    </div>
                  ) : typeof submission === 'object' ? (
                    <pre className="text-xs whitespace-pre-wrap font-mono text-zinc-300"><code>{JSON.stringify(submission, null, 2)}</code></pre>
                  ) : (
                    <p className="text-xs break-words font-mono text-zinc-300">{String(submission)}</p>
                  )}
                </div>

                <div>
                  <label className="text-sm font-medium text-zinc-400">
                    Комментарий для доработки (если требуется)
                  </label>
                  <textarea
                    value={comments[quest.id] || ""}
                    onChange={(e) => handleCommentChange(quest.id, e.target.value)}
                    className="w-full mt-2 rounded-xl border border-zinc-700 p-3 text-sm bg-zinc-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition"
                    rows={3}
                    placeholder="Например: Пожалуйста, загрузите скан в более высоком разрешении."
                  />
                </div>

                <div className="flex items-center gap-4 mt-4">
                  <button
                    className="flex-1 btn bg-white text-black font-semibold hover:bg-zinc-200 flex items-center justify-center gap-2"
                    onClick={() => approveQuest(quest.id)}
                  >
                    <span className="text-green-500">✅</span> Одобрить
                  </button>
                  <button
                    className="flex-1 btn border border-amber-500/50 text-amber-400 font-semibold hover:bg-amber-500/10 flex items-center justify-center gap-2"
                    onClick={() => handleRequestChanges(quest.id)}
                  >
                    <RefreshIcon /> Отправить на доработку
                  </button>
                </div>
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
}
--- END FILE: app/curator/review/page.tsx ---

--- BEGIN FILE: app/curator/student/[studentId]/page.tsx ---
"use client";
import { useMemo } from "react";
import { useParams } from "next/navigation";
import allStudents from "@/mock/students.json";
import allCountries from "@/mock/countries.json";
import allProgress from "@/mock/student_progress.json";
import allQuests from "@/mock/quest_templates.json";

export default function StudentDossierPage() {
  const params = useParams();
  const studentId = Number(params.studentId);

  const student = useMemo(() => allStudents.find(s => s.id === studentId), [studentId]);
  const country = useMemo(() => allCountries.find(c => c.id === student?.country_id), [student]);
  const progress = useMemo(() => (allProgress as any)[studentId] || {}, [studentId]);

  if (!student || !country) {
    return <div>Студент не найден.</div>;
  }

  const requiredQuests = allQuests.filter(q => country.required_quest_ids.includes(q.id));

  const approveQuest = (questId: number) => {
    // В реальном приложении здесь будет вызов API
    alert(`(Mock) Квест #${questId} для студента ${student.name} одобрен.`);
  };

  const rejectQuest = (questId: number) => {
    // В реальном приложении здесь будет вызов API
    const reason = prompt(`Причина отклонения квеста #${questId}:`);
    alert(`(Mock) Квест #${questId} отклонен. Причина: ${reason}`);
  };

  return (
    <div>
      <div className="mb-6">
        <h1 className="text-2xl font-semibold">{student.name}</h1>
        <p className="text-zinc-500">Досье студента | Операция: {country.flag_icon} {country.name}</p>
      </div>

      <div className="grid lg:grid-cols-3 gap-6">
        <section className="lg:col-span-2 card p-4">
          <h2 className="text-lg font-semibold mb-3">Трекер Квестов</h2>
          <div className="space-y-3 max-h-[600px] overflow-y-auto pr-2">
            {requiredQuests.map(quest => {
              const questProgress = progress[quest.id];
              const status = questProgress?.status || 'todo';

              return (
                <div key={quest.id} className="p-3 rounded-xl border bg-zinc-50 dark:bg-zinc-800/50">
                  <div className="flex items-center justify-between">
                    <span className="font-medium text-sm">{quest.title}</span>
                    {status === 'done' && <span className="text-xs px-2 py-1 rounded-full bg-green-500/10 text-green-600">Одобрен ✅</span>}
                    {status === 'review' && <span className="text-xs px-2 py-1 rounded-full bg-yellow-500/10 text-yellow-700">На проверке ⏳</span>}
                    {status === 'todo' && <span className="text-xs px-2 py-1 rounded-full bg-zinc-500/10 text-zinc-500">Не выполнен</span>}
                  </div>
                  {questProgress?.submission && (
                    <div className="mt-2 text-xs border-t pt-2 text-zinc-500">
                      <p><b>Результат:</b> {typeof questProgress.submission === 'object' ? JSON.stringify(questProgress.submission) : questProgress.submission}</p>
                    </div>
                  )}
                  {status === 'review' && (
                    <div className="mt-3 flex items-center gap-2">
                      <button onClick={() => approveQuest(quest.id)} className="btn btn-primary text-xs !py-1">Одобрить</button>
                      <button onClick={() => rejectQuest(quest.id)} className="btn text-xs !py-1 bg-red-500/10 text-red-600">Отклонить</button>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </section>

        <aside className="space-y-6">
          <div className="card p-4">
            <h2 className="text-lg font-semibold mb-3">Академический Профиль</h2>
            <ul className="text-sm space-y-2">
              <li><b>Email:</b> {student.email}</li>
              <li><b>GPA:</b> {student.gpa}</li>
              <li><b>IELTS:</b> {student.ielts_score}</li>
            </ul>
          </div>
          <div className="card p-4">
             <h2 className="text-lg font-semibold mb-3">Выбранные программы</h2>
             <ul className="text-sm space-y-1 list-disc list-inside">
                {student.selected_program_ids.map(id => <li key={id}>Программа #{id}</li>)}
             </ul>
          </div>
        </aside>
      </div>
    </div>
  );
}
--- END FILE: app/curator/student/[studentId]/page.tsx ---

--- BEGIN FILE: app/curator/students/AddStudentModal.tsx ---
"use client";
import { useCountry } from "@/app/shared/CountryContext";
import { useMemo, useState } from "react";
import type { Student } from "./page";

type Props = {
  onClose: () => void;
  onSave: (data: Omit<Student, 'id'>) => void;
};

export default function AddStudentModal({ onClose, onSave }: Props) {
  const { countries, universities, quests } = useCountry();

  // Состояние для всего процесса
  const [currentStep, setCurrentStep] = useState(1);
  const [studentName, setStudentName] = useState("");
  const [selectedCountryId, setSelectedCountryId] = useState(countries[0]?.id || "");
  const [selectedUniversityIds, setSelectedUniversityIds] = useState<string[]>([]);
  const [selectedQuestIds, setSelectedQuestIds] = useState<number[]>([]);
  // --- НОВОЕ: Состояние для кастомных задач ---
  const [customQuests, setCustomQuests] = useState<{ id: number; title: string }[]>([]);
  const [newCustomQuestTitle, setNewCustomQuestTitle] = useState("");

  // Фильтруем квесты на основе выбранной страны
  const availableQuests = useMemo(() => {
    const country = countries.find(c => c.id === selectedCountryId);
    if (!country) return [];
    const requiredIds = new Set(country.required_quest_ids);
    return quests.filter(q => requiredIds.has(q.id));
  }, [selectedCountryId, countries, quests]);

  // --- НОВОЕ: Логика для добавления и удаления кастомных задач ---
  const handleAddCustomQuest = () => {
    if (!newCustomQuestTitle.trim()) return;
    const newId = -Date.now(); // Уникальный отрицательный ID
    const newQuest = { id: newId, title: newCustomQuestTitle.trim() };

    setCustomQuests(prev => [...prev, newQuest]);
    setSelectedQuestIds(prev => [...prev, newId]); // Автоматически выбираем новую задачу
    setNewCustomQuestTitle(""); // Сбрасываем поле ввода
  };

  const handleRemoveCustomQuest = (idToRemove: number) => {
    setCustomQuests(prev => prev.filter(q => q.id !== idToRemove));
    setSelectedQuestIds(prev => prev.filter(id => id !== idToRemove));
  };

  const handleNext = () => {
    if (currentStep === 1 && !studentName) {
      alert("Пожалуйста, введите имя студента.");
      return;
    }
    setCurrentStep(prev => prev + 1);
  };

  const handleBack = () => setCurrentStep(prev => prev - 1);

  const handleSave = () => {
    onSave({
      name: studentName,
      countryId: selectedCountryId,
      assignedUniversityIds: selectedUniversityIds,
      assignedQuestIds: selectedQuestIds,
      customQuests: customQuests,
    });
  };

  // --- Функции для рендеринга каждого шага ---

  const renderStepOne = () => (
    <div>
      <h3 className="text-lg font-semibold mb-4">Шаг 1: Основная информация</h3>
      <div className="space-y-4">
        <div>
          <label className="text-sm">Имя и Фамилия</label>
          <input type="text" value={studentName} onChange={e => setStudentName(e.target.value)} className="w-full mt-1 rounded-xl border p-2 bg-white dark:bg-zinc-800" />
        </div>
        <div>
          <label className="text-sm">Страна поступления</label>
          <select value={selectedCountryId} onChange={e => setSelectedCountryId(e.target.value)} className="w-full mt-1 rounded-xl border p-2 bg-white dark:bg-zinc-800">
            {countries.map(c => <option key={c.id} value={c.id}>{c.flag_icon} {c.name}</option>)}
          </select>
        </div>
      </div>
    </div>
  );

  const renderStepTwo = () => (
    <div>
      <h3 className="text-lg font-semibold mb-4">Шаг 2: Выбор университетов</h3>
      <div className="max-h-64 overflow-y-auto space-y-2 pr-2">
        {universities.map(uni => (
          <label key={uni.id} className="flex items-center gap-3 p-2 rounded-lg hover:bg-white/10 cursor-pointer">
            <input
              type="checkbox"
              checked={selectedUniversityIds.includes(uni.id)}
              onChange={() => {
                setSelectedUniversityIds(prev =>
                  prev.includes(uni.id) ? prev.filter(id => id !== uni.id) : [...prev, uni.id]
                );
              }}
            />
            <span>{uni.logo_url} {uni.name}</span>
          </label>
        ))}
      </div>
    </div>
  );

  const renderStepThree = () => (
    <div>
      <h3 className="text-lg font-semibold mb-4">Шаг 3: Назначение задач</h3>
      <p className="text-xs text-zinc-400 mb-2">Отображены задачи для страны: {countries.find(c => c.id === selectedCountryId)?.name}</p>
      <div className="max-h-64 overflow-y-auto space-y-2 pr-2">
        {availableQuests.map(quest => (
          <label key={quest.id} className="flex items-center gap-3 p-2 rounded-lg hover:bg-white/10 cursor-pointer">
             <input
              type="checkbox"
              checked={selectedQuestIds.includes(quest.id)}
              onChange={() => {
                setSelectedQuestIds(prev =>
                  prev.includes(quest.id) ? prev.filter(id => id !== quest.id) : [...prev, quest.id]
                );
              }}
            />
            <span className="text-sm">{quest.title}</span>
          </label>
        ))}
      </div>
      {/* --- НОВОЕ: Блок для добавления своих задач --- */}
      <div className="border-t border-white/10 pt-4 mt-4">
        <h4 className="font-semibold text-sm mb-2">Добавить свою задачу</h4>
        <div className="flex gap-2">
            <input
                type="text"
                placeholder="Название задачи"
                className="flex-1 rounded-xl border p-2 bg-white dark:bg-zinc-800 text-sm"
                value={newCustomQuestTitle}
                onChange={e => setNewCustomQuestTitle(e.target.value)}
            />
            <button className="btn btn-primary text-sm" onClick={handleAddCustomQuest}>Добавить</button>
        </div>
        <div className="space-y-2 mt-3 max-h-24 overflow-y-auto pr-2">
            {customQuests.map(quest => (
                <div key={quest.id} className="flex items-center justify-between p-2 rounded-lg bg-white/5">
                    <label className="flex items-center gap-3 cursor-pointer">
                        <input
                            type="checkbox"
                            checked={selectedQuestIds.includes(quest.id)}
                            onChange={() => {
                                setSelectedQuestIds(prev =>
                                    prev.includes(quest.id) ? prev.filter(id => id !== quest.id) : [...prev, quest.id]
                                );
                            }}
                        />
                        <span className="text-sm">{quest.title}</span>
                    </label>
                    <button onClick={() => handleRemoveCustomQuest(quest.id)} className="text-red-400 hover:text-red-500 text-xl leading-none">&times;</button>
                </div>
            ))}
        </div>
      </div>
    </div>
  );

  const renderStepFour = () => (
    <div>
      <h3 className="text-lg font-semibold mb-4">Шаг 4: Проверка и сохранение</h3>
      <div className="space-y-3 text-sm">
        <p><b>Имя:</b> {studentName}</p>
        <p><b>Страна:</b> {countries.find(c => c.id === selectedCountryId)?.name}</p>
        <div>
            <b>Университеты:</b>
            <ul className="list-disc list-inside pl-2 text-xs">
                {universities.filter(u => selectedUniversityIds.includes(u.id)).map(u => <li key={u.id}>{u.name}</li>)}
            </ul>
        </div>
        <div>
            <b>Задачи:</b>
            <ul className="list-disc list-inside pl-2 text-xs">
                {quests.filter(q => selectedQuestIds.includes(q.id)).map(q => <li key={q.id}>{q.title}</li>)}
                {customQuests.filter(q => selectedQuestIds.includes(q.id)).map(q => <li key={q.id}><i>{q.title} (своя задача)</i></li>)}
            </ul>
        </div>
      </div>
    </div>
  );


  return (
    <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4 z-50" onClick={onClose}>
      <div className="w-full max-w-2xl card p-6 bg-zinc-900" onClick={e => e.stopPropagation()}>
        <div className="flex justify-between items-start">
            <h2 className="text-xl font-bold mb-1">Новый студент</h2>
            <button onClick={onClose} className="text-2xl leading-none">&times;</button>
        </div>
        <p className="text-sm text-zinc-400 mb-6">Шаг {currentStep} из 4</p>

        <div className="min-h-[20rem]">
            {currentStep === 1 && renderStepOne()}
            {currentStep === 2 && renderStepTwo()}
            {currentStep === 3 && renderStepThree()}
            {currentStep === 4 && renderStepFour()}
        </div>

        {/* Навигация */}
        <div className="border-t border-white/10 pt-4 mt-4 flex justify-between items-center">
          <div>
            {currentStep > 1 && (
              <button className="btn" onClick={handleBack}>Назад</button>
            )}
          </div>
          <div>
            {currentStep < 4 ? (
              <button className="btn btn-primary" onClick={handleNext}>Далее</button>
            ) : (
              <button className="btn btn-primary" onClick={handleSave}>Сохранить студента</button>
            )}
          </div>
        </div>

      </div>
    </div>
  );
}
--- END FILE: app/curator/students/AddStudentModal.tsx ---

--- BEGIN FILE: app/curator/students/page.tsx ---
"use client";
import { useEffect, useMemo, useState } from "react";
import { useCountry } from "@/app/shared/CountryContext";
import AddStudentModal from "./AddStudentModal";

// --- ИЗМЕНЕНИЕ: Модель студента расширена для хранения индивидуальных настроек ---
export type Student = {
  id: string;
  name: string;
  countryId: string;
  assignedUniversityIds: string[];
  assignedQuestIds: number[];
  customQuests?: { id: number; title: string }[];
};

// --- НОВОЕ: Мок-данные для демонстрации UI как на скриншоте ---
const mockStudentProgress = [
  {
    id: "mock_1",
    name: "Артём Ганеев",
    countryId: "it",
    completedQuests: 4,
    totalQuests: 9,
    reviewQuests: 1,
  },
  {
    id: "mock_2",
    name: "Вероника Смирнова",
    countryId: "at",
    completedQuests: 2,
    totalQuests: 8,
    reviewQuests: 1,
  },
  {
    id: "mock_3",
    name: "Иван Петров",
    countryId: "at",
    completedQuests: 0,
    totalQuests: 8,
    reviewQuests: 1,
  },
];

const STORAGE_KEY = "managedStudents";

export default function StudentPanelPage() {
  const { countries } = useCountry();
  const [students, setStudents] = useState<Student[]>([]);
  // --- НОВОЕ: Состояние для управления модальным окном ---
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    // Загружаем студентов из localStorage, если они есть
    try {
      const raw = localStorage.getItem(STORAGE_KEY);
      if (raw) setStudents(JSON.parse(raw));
    } catch {}
  }, []);

  // --- НОВОЕ: Функция сохранения студента из модального окна ---
  const handleSaveStudent = (newStudentData: Omit<Student, 'id'>) => {
    const newStudent: Student = { ...newStudentData, id: `student_${Date.now()}`};
    const updatedStudents = [...students, newStudent];
    setStudents(updatedStudents);
    localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedStudents));
    setIsModalOpen(false); // Закрываем модальное окно после сохранения
  };

  // Объединяем мок-данных и реальных студентов для отображения
  const allStudents = useMemo(() => {
    const combined = [...mockStudentProgress];
    // Добавляем реальных студентов, но без прогресса (т.к. он не хранится)
    students.forEach(s => {
      combined.push({
        ...s,
        completedQuests: 0,
        // Для новых студентов считаем прогресс на лету (пока 0)
        totalQuests: s.assignedQuestIds.length,
        reviewQuests: 0,
      });
    });
    return combined;
  }, [students]);

  return (
    <div>
      <div>
        <h1 className="text-2xl font-semibold">Панель Студентов</h1>
        <p className="text-zinc-600 dark:text-zinc-300 mb-6">Обзор прогресса всех активных студентов.</p>
        {/* --- НОВОЕ: Кнопка для открытия модального окна --- */}
        <button className="btn btn-primary mb-6" onClick={() => setIsModalOpen(true)}>
          + Добавить студента
        </button>
      </div>

      <div className="space-y-4">
        {allStudents.map((student) => {
            const country = countries.find((c) => c.id === student.countryId);
            const progressPercentage = student.totalQuests > 0 ? (student.completedQuests / student.totalQuests) * 100 : 0;
            const isLowProgress = progressPercentage < 30 && student.completedQuests < 3;

            return (
                <div key={student.id} className="card p-4 bg-zinc-800/50">
                    <div className="grid grid-cols-[1fr_auto] gap-4">
                        <div>
                            <h3 className="text-lg font-semibold">{student.name}</h3>
                            <div className="text-sm text-zinc-400 flex items-center gap-2">
                                {country?.flag_icon} {country?.name || "Неизвестная страна"}
                            </div>
                        </div>
                        <div className="text-right">
                            <div className="text-sm font-medium">Прогресс</div>
                            <div className="text-xs text-zinc-400 mb-1">{student.completedQuests} / {student.totalQuests} квестов</div>
                            <div className="w-32 bg-zinc-700 rounded-full h-2">
                                <div className="bg-blue-600 h-2 rounded-full" style={{ width: `${progressPercentage}%` }}></div>
                            </div>
                        </div>
                    </div>
                    <div className="border-t border-white/10 my-3"></div>
                    <div className="flex items-center gap-2">
                        {student.reviewQuests > 0 && (
                            <div className="text-xs font-medium px-3 py-1 rounded-full bg-yellow-500/20 text-yellow-400">
                                На проверке: {student.reviewQuests} квеста
                            </div>
                        )}
                        {isLowProgress && (
                            <div className="text-xs font-medium px-3 py-1 rounded-full bg-red-500/20 text-red-400">
                                Низкий прогресс
                            </div>
                        )}
                    </div>
                </div>
            );
        })}
      </div>

      {/* --- НОВОЕ: Рендер модального окна --- */}
      {isModalOpen && (
        <AddStudentModal onClose={() => setIsModalOpen(false)} onSave={handleSaveStudent} />
      )}
    </div>
  );
}
--- END FILE: app/curator/students/page.tsx ---

--- BEGIN FILE: app/globals.css ---
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}

/* utilities used by Student/Curator screens */
.container {
  @apply mx-auto px-4;
}
.card {
  @apply rounded-2xl shadow border border-black/5 dark:border-white/10 bg-white dark:bg-zinc-900;
}
.btn {
  @apply inline-flex items-center justify-center rounded-xl px-4 py-2 font-medium;
}
.btn-primary {
  @apply bg-black text-white dark:bg-white dark:text-black;
}
--- END FILE: app/globals.css ---

--- BEGIN FILE: app/layout.tsx ---
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { AuthProvider } from "./shared/AuthContext";
import { ProgressProvider } from "./shared/ProgressContext";
import { CountryProvider } from "./shared/CountryContext";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <AuthProvider>
          <ProgressProvider>
            <CountryProvider>
              {children}
            </CountryProvider>
          </ProgressProvider>
        </AuthProvider>
      </body>
    </html>
  );
}
--- END FILE: app/layout.tsx ---

--- BEGIN FILE: app/login/page.tsx ---
"use client";
import { useRouter } from "next/navigation";
import { useAuth } from "../shared/AuthContext";
import { useEffect } from "react";

export default function LoginPage() {
  const auth = useAuth();
  const router = useRouter();

  useEffect(() => {
    // Если пользователь уже залогинен, перенаправляем его
    if (auth.user) {
      router.replace(auth.user.role === "student" ? "/student/dashboard" : "/curator/dashboard");
    }
  }, [auth.user, router]);

  const handleLogin = (role: "student" | "curator") => {
    auth.login(role);
  };

  return (
    <div className="min-h-screen bg-zinc-50 dark:bg-black flex items-center justify-center">
      <div className="w-full max-w-sm rounded-2xl shadow p-8 bg-white dark:bg-zinc-900">
        <h1 className="text-2xl font-semibold mb-3 text-zinc-900 dark:text-zinc-50">Вход в систему</h1>
        <p className="text-zinc-600 dark:text-zinc-300 mb-6">Выберите роль для входа (mock).</p>
        <div className="space-y-3">
          <button
            onClick={() => handleLogin("student")}
            className="w-full rounded-2xl py-3 font-medium bg-black text-white dark:bg-white dark:text-black"
          >
            Войти как Студент
          </button>
          <button
            onClick={() => handleLogin("curator")}
            className="w-full rounded-2xl py-3 font-medium border border-black/10 dark:border-white/20"
          >
            Войти как Куратор
          </button>
        </div>
      </div>
    </div>
  );
}
--- END FILE: app/login/page.tsx ---

--- BEGIN FILE: app/page.tsx ---
"use client";
import { useEffect } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "./shared/AuthContext";

export default function RootPage() {
  const router = useRouter();
  const { user, loading } = useAuth();

  useEffect(() => {
    if (loading) return; // Ждем, пока AuthContext определит состояние пользователя

    if (!user) {
      router.replace("/login");
    } else if (user.role === "student") {
      router.replace("/student/dashboard");
    } else if (user.role === "curator") {
      router.replace("/curator/dashboard");
    }
  }, [user, loading, router]);

  return (
    <div className="min-h-screen bg-zinc-50 dark:bg-black flex items-center justify-center">Загрузка...</div>
  );
}
--- END FILE: app/page.tsx ---

--- BEGIN FILE: app/shared/AuthContext.tsx ---
"use client";
import { useRouter } from "next/navigation";
import React, { createContext, useContext, useEffect, useState } from "react";

type User = {
  name: string;
  role: "student" | "curator";
};

type AuthContextType = {
  user: User | null;
  loading: boolean;
  login: (role: "student" | "curator") => void;
  logout: () => void;
};

const AuthCtx = createContext<AuthContextType | null>(null);

export const AuthProvider: React.FC<React.PropsWithChildren> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    try {
      const storedUser = localStorage.getItem("authUser");
      if (storedUser) {
        setUser(JSON.parse(storedUser));
      }
    } catch (e) {
      console.error("Failed to parse auth user from localStorage", e);
    } finally {
      setLoading(false);
    }
  }, []);

  const login = (role: "student" | "curator") => {
    const newUser: User = { name: role === "student" ? "Студент" : "Куратор", role };
    localStorage.setItem("authUser", JSON.stringify(newUser));
    setUser(newUser);
    router.replace(role === "student" ? "/student/dashboard" : "/curator/dashboard");
  };

  const logout = () => {
    localStorage.removeItem("authUser");
    setUser(null);
    router.replace("/login");
  };

  const value = { user, loading, login, logout };

  return <AuthCtx.Provider value={value}>{children}</AuthCtx.Provider>;
};

export const useAuth = () => {
  const ctx = useContext(AuthCtx);
  if (!ctx) throw new Error("useAuth must be used within an AuthProvider");
  return ctx;
};
--- END FILE: app/shared/AuthContext.tsx ---

--- BEGIN FILE: app/shared/CountryContext.tsx ---
"use client";
import React, { createContext, useContext, useEffect, useMemo, useState } from "react";
import baseCountries from "@/mock/countries.json";
import questTemplates from "@/mock/quest_templates.json";
import docTemplates from "@/mock/document_templates.json";
import universityTemplates from "@/mock/universities.json";
import programTemplates from "@/mock/programs.json";

export type CountryProfile = {
  id: string;
  name: string;
  flag_icon: string;
  required_document_ids: number[];
  required_quest_ids: number[];
};

export type QuestTemplate = {
  id: number;
  stage: string;
  title: string;
  xp: number;
  description: string;
  deadline: string;
  links_to_document_id: number | null;
};

export type DocumentTemplate = {
  id: number;
  category: string;
  title: string;
};

// --- НОВОЕ: Добавлены типы для университетов и программ ---
export type University = {
  id: string;
  name: string;
  logo_url: string;
  program_ids: number[];
};

export type Program = {
  id: number;
  title: string;
  university_id: string;
  deadline: string;
  link: string;
  image_url: string;
  required_document_ids: number[];
};

type Ctx = {
  countries: CountryProfile[];
  selectedCountryId: string;
  setSelectedCountryId: (id: string) => void;
  selectedCountry: CountryProfile | undefined;
  quests: QuestTemplate[];
  documents: DocumentTemplate[];
  universities: University[];
  programs: Program[];
};

const CountryCtx = createContext<Ctx | null>(null);

function readOverrides(): CountryProfile[] | null {
  if (typeof window === "undefined") return null;
  try {
    const raw = localStorage.getItem("countriesOverride");
    if (!raw) return null;
    const parsed = JSON.parse(raw);
    if (Array.isArray(parsed)) return parsed as CountryProfile[];
    return null;
  } catch {
    return null;
  }
}

export const CountryProvider: React.FC<React.PropsWithChildren> = ({ children }) => {
  const [countries, setCountries] = useState<CountryProfile[]>(baseCountries as CountryProfile[]);
  const [selectedCountryId, setSelectedCountryIdState] = useState<string>("");

  useEffect(() => {
    const override = readOverrides();
    if (override && override.length) setCountries(override);
    const saved = localStorage.getItem("selectedCountryId");
    setSelectedCountryIdState(saved || (override?.[0]?.id ?? (countries[0]?.id || "at")));
  }, []);

  const setSelectedCountryId = (id: string) => {
    setSelectedCountryIdState(id);
    if (typeof window !== "undefined") localStorage.setItem("selectedCountryId", id);
  };

  const selectedCountry = useMemo(
    () => countries.find((c) => c.id === selectedCountryId),
    [countries, selectedCountryId]
  );

  const value: Ctx = {
    countries,
    selectedCountryId,
    setSelectedCountryId,
    selectedCountry,
    quests: questTemplates as QuestTemplate[],
    documents: docTemplates as DocumentTemplate[],
    universities: universityTemplates as University[],
    programs: programTemplates as Program[],
  };

  return <CountryCtx.Provider value={value}>{children}</CountryCtx.Provider>;
};

export function useCountry() {
  const ctx = useContext(CountryCtx);
  if (!ctx) throw new Error("useCountry must be used within CountryProvider");
  return ctx;
}
--- END FILE: app/shared/CountryContext.tsx ---

--- BEGIN FILE: app/shared/CountrySwitcher.tsx ---
"use client";
import { useCountry } from "./CountryContext";

export default function CountrySwitcher() {
  const { countries, selectedCountryId, setSelectedCountryId } = useCountry();
  return (
    <div className="flex items-center gap-2">
      <span className="text-xs text-zinc-500">Операция:</span>
      <select
        className="flex-1 rounded-xl border px-3 py-2 bg-white dark:bg-zinc-800"
        value={selectedCountryId}
        onChange={(e) => setSelectedCountryId(e.target.value)}
        aria-label="Переключатель страны"
      >
        {countries.map((c) => (
          <option key={c.id} value={c.id}>
            {c.flag_icon} {c.name}
          </option>
        ))}
      </select>
    </div>
  );
}
--- END FILE: app/shared/CountrySwitcher.tsx ---

--- BEGIN FILE: app/shared/Notifications.tsx ---
"use client";
import { useMemo, useState, useRef, useEffect } from "react";
import { useCountry } from "./CountryContext";
import { useProgress } from "./ProgressContext";

const BellIcon = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    className="h-6 w-6"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
    strokeWidth={2}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"
    />
  </svg>
);

export default function Notifications() {
  const [isOpen, setIsOpen] = useState(false);
  const { quests, selectedCountry } = useCountry();
  const { progress } = useProgress();
  const ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (ref.current && !ref.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, [ref]);

  const notifications = useMemo(() => {
    const notifs: { id: string; type: "review" | "done" | "deadline"; message: string }[] = [];
    if (!selectedCountry) return [];

    const TODAY = new Date("2025-10-24T12:00:00Z"); // Заданная дата для расчета дедлайнов
    const DEADLINE_THRESHOLD_DAYS = 7;

    const requiredQuestIds = new Set(selectedCountry.required_quest_ids);
    const relevantQuests = quests.filter((q) => requiredQuestIds.has(q.id));

    for (const quest of relevantQuests) {
      const questProgress = progress[quest.id];

      if (questProgress?.status === "review") {
        notifs.push({
          id: `s-review-${quest.id}`,
          type: "review",
          message: `Задача "${quest.title}" отправлена на проверку.`,
        });
      } else if (questProgress?.status === "done") {
        notifs.push({ id: `s-done-${quest.id}`, type: "done", message: `Задача "${quest.title}" одобрена! ✅` });
      }

      if (questProgress?.status !== "done") {
        const deadlineDate = new Date(quest.deadline);
        const diffTime = deadlineDate.getTime() - TODAY.getTime();
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

        if (diffDays >= 0 && diffDays <= DEADLINE_THRESHOLD_DAYS) {
          notifs.push({
            id: `d-${quest.id}`,
            type: "deadline",
            message: `Дедлайн для "${quest.title}" истекает ${quest.deadline}.`,
          });
        }
      }
    }
    return notifs;
  }, [selectedCountry, quests, progress]);

  const typeStyles = {
    review: "border-l-4 border-yellow-500",
    done: "border-l-4 border-green-500",
    deadline: "border-l-4 border-red-500",
  };

  return (
    <div className="relative" ref={ref}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="relative text-zinc-500 hover:text-zinc-800 dark:hover:text-zinc-200"
        aria-label={`Уведомления (${notifications.length})`}
      >
        <BellIcon />
        {notifications.length > 0 && (
          <span className="absolute -top-1 -right-1 flex h-4 w-4 items-center justify-center rounded-full bg-red-500 text-xs font-bold text-white">
            {notifications.length}
          </span>
        )}
      </button>
      {isOpen && (
        <div className="card absolute left-[30px] top-[-10px] mt-2 w-80 max-h-96 overflow-y-auto p-2 shadow-xl z-10">
          <div className="p-2 font-semibold text-sm">Уведомления</div>
          {notifications.length > 0 ? (
            <ul className="space-y-1">
              {notifications.map((n) => (
                <li key={n.id} className={`p-2 rounded-lg text-xs ${typeStyles[n.type]} bg-black/5 dark:bg-white/5`}>{n.message}</li>
              ))}
            </ul>
          ) : (<p className="p-4 text-center text-xs text-zinc-500">Нет новых уведомлений.</p>)}
        </div>
      )}
    </div>
  );
}
--- END FILE: app/shared/Notifications.tsx ---

--- BEGIN FILE: app/shared/ProgressContext.tsx ---
"use client";
import React, { createContext, useContext, useEffect, useState } from "react";

/* --- ИЗМЕНЕНИЕ: Добавлен статус для задач, требующих правок --- */
export type ProgressStatus = "review" | "done" | "changes_requested";
export type ProgressItem = {
  status: ProgressStatus;
  submission: any; // Allow storing strings or objects
  comment?: string; // Комментарий куратора
};
type ProgressState = Record<number, ProgressItem>;

type ProgressContextType = {
  progress: ProgressState;
  submitQuest: (questId: number, submission: any) => void;
  uncompleteQuest: (questId: number) => void;
  approveQuest: (questId: number) => void;
  requestChanges: (questId: number, comment: string) => void;
};

const ProgressCtx = createContext<ProgressContextType | null>(null);

// app/shared/ProgressContext.tsx

const STORAGE_KEY = "userProgress_submissions";
const MOCK_INITIAL_PROGRESS: ProgressState = {
  1: { status: "review", submission: { email: "student@gmail.com", password: "password123" } },
  11: { status: "review", submission: "photo_for_passport.jpg" }, // <--- ВОТ ИЗМЕНЕНИЕ
  10: { status: "done", submission: "passport_scan.pdf" },
  12: { status: "done", submission: "school_apostille.pdf" },
  13: { status: "done", submission: "college_docs.pdf" },
};

export const ProgressProvider: React.FC<React.PropsWithChildren> = ({ children }) => {
  const [progress, setProgress] = useState<ProgressState>({});

  useEffect(() => {
    try {
      const storedProgress = localStorage.getItem(STORAGE_KEY);
      if (storedProgress) {
        setProgress(JSON.parse(storedProgress));
      } else {
        // Если нет прогресса в хранилище, заполняем его мок-данными
        setProgress(MOCK_INITIAL_PROGRESS);
        localStorage.setItem(STORAGE_KEY, JSON.stringify(MOCK_INITIAL_PROGRESS));
      }
    } catch (e) {
      console.error("Failed to parse progress from localStorage", e);
    }
  }, []);

  const submitQuest = (questId: number, submission: any) => {
    // All submissions first go to "review" status
    // If resubmitting after changes were requested, clear the old comment
    setProgress((prev) => {
      const updatedProgress = {
        ...prev,
        // При повторной отправке задача снова уходит на проверку, комментарий очищается
        [questId]: { status: "review" as ProgressStatus, submission }
      };
      localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedProgress));
      return updatedProgress;
    });
  };

  const uncompleteQuest = (questId: number) => {
    setProgress((prev) => {
      const updatedProgress = { ...prev };
      delete updatedProgress[questId];
      localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedProgress));
      return updatedProgress;
    });
  };

  const approveQuest = (questId: number) => {
    setProgress((prev) => {
      if (!prev[questId]) return prev; // Cannot approve something that doesn't exist
      const updatedProgress = { ...prev };
      updatedProgress[questId] = { ...updatedProgress[questId], status: "done" as ProgressStatus };
      localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedProgress));
      return updatedProgress;
    });
  };

  /* --- НОВОЕ: Функция для отправки задачи на доработку --- */
  const requestChanges = (questId: number, comment: string) => {
    setProgress((prev) => {
      if (!prev[questId]) return prev;
      const updatedProgress = { ...prev };
      updatedProgress[questId] = { ...updatedProgress[questId], status: "changes_requested" as ProgressStatus, comment };
      localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedProgress));
      return updatedProgress;
    });
  };

  const value = {
    progress,
    submitQuest,
    uncompleteQuest,
    approveQuest,
    requestChanges,
  };

  return <ProgressCtx.Provider value={value}>{children}</ProgressCtx.Provider>;
};

export const useProgress = () => {
  const ctx = useContext(ProgressCtx);
  if (!ctx) throw new Error("useProgress must be used within a ProgressProvider");
  return ctx;
};
--- END FILE: app/shared/ProgressContext.tsx ---

--- BEGIN FILE: app/shared/Sidebar.tsx ---
"use client";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { useAuth } from "./AuthContext";
import Notifications from "./Notifications";
import CountrySwitcher from "./CountrySwitcher";

const NavItem = ({ href, label }: { href: string; label: string }) => {
  const path = usePathname();
  const active = path === href;
  return (
    <Link
      href={href}
      className={`block px-4 py-2 rounded-xl transition ${
        active ? "bg-black text-white dark:bg-white dark:text-black" : "hover:bg-black/5 dark:hover:bg-white/10"
      }`}
    >
      {label}
    </Link>
  );
};

export default function Sidebar() {
  const { user, logout } = useAuth();

  return (
    <aside className="w-full sm-w-64 shrink-0">
      {user?.role === "student" && (
        <div className="card p-4">
          <div className="flex items-center justify-between mb-2">
            <div className="text-xs uppercase tracking-wide text-zinc-500">Текущая операция</div>
            <Notifications />
          </div>
          <CountrySwitcher />
        </div>
      )}
      <div className="mt-4 card p-2 space-y-1">
        <nav className="space-y-1">
          {user?.role === "student" && (
            <>
              <NavItem href="/student/dashboard" label="Главная" />
              <NavItem href="/student/quests" label="Мои Квесты" />
              <NavItem href="/student/kanban" label="Kanban Доска" />
              {/* --- НОВОЕ: Добавлена ссылка на раздел "Мои Программы" --- */}
              <NavItem href="/student/programs" label="Мои Программы" />
              <NavItem href="/student/folder" label="Моя Папка" />
            </>
          )}
          {user?.role === "curator" && (
            <>
              {/* --- ИЗМЕНЕНИЕ: Ссылка "Студенты" переименована в "Панель Студентов" --- */}
              <NavItem href="/curator/students" label="Панель Студентов" />
              <NavItem href="/curator/review" label="Ревью Задач" />
              <NavItem href="/curator/admin/countries" label="Конфигуратор Стран" />
            </>
          )}
        </nav>
        <div className="h-px bg-black/5 dark:bg-white/10 my-2 !mt-3 !mb-2" />
        <button onClick={logout} className="block w-full text-left px-4 py-2 rounded-xl transition hover:bg-black/5 dark:hover:bg-white/10">Выйти</button>
      </div>
    </aside>
  );
}
--- END FILE: app/shared/Sidebar.tsx ---

--- BEGIN FILE: app/student/dashboard/page.tsx ---
"use client";
import { useAuth } from "@/app/shared/AuthContext";
import { useCountry } from "@/app/shared/CountryContext";
import { useProgress } from "@/app/shared/ProgressContext";
import Link from "next/link";
import { useMemo } from "react";

export default function Dashboard() {
  const { user } = useAuth();
  const { selectedCountry, quests, documents } = useCountry();
  const { progress } = useProgress();

  const { totalQuests, completedQuests, progressPercentage, totalXp } = useMemo(() => {
    if (!selectedCountry) {
      return { totalQuests: 0, completedQuests: 0, progressPercentage: 0, totalXp: 0 };
    }

    const requiredQuests = new Set(selectedCountry.required_quest_ids);
    const allCompletedIds = Object.keys(progress).filter((id) => progress[Number(id)].status === 'done').map(Number);
    const relevantCompletedIds = allCompletedIds.filter((id) => requiredQuests.has(id));
    const progressValue = requiredQuests.size > 0 ? (relevantCompletedIds.length / requiredQuests.size) * 100 : 0;

    const xp = relevantCompletedIds.reduce((sum: number, id: number) => {
      const quest = quests.find((q) => q.id === id);
      return sum + (quest?.xp || 0);
    }, 0);

    return {
      totalQuests: requiredQuests.size,
      completedQuests: relevantCompletedIds.length,
      progressPercentage: progressValue,
      totalXp: xp,
    };
  }, [selectedCountry, progress, quests]);

  return (
    <div>
      <h1 className="text-2xl font-semibold mb-2">Адаптивный Штаб</h1>
      <p className="text-zinc-600 dark:text-zinc-300 mb-6">
        Добро пожаловать, {user?.name}! Здесь ваш центр управления операцией «Поступление».
      </p>

      <div className="grid sm:grid-cols-[1fr_2fr] gap-6 mb-6">
        <div className="card p-4 flex flex-col items-center text-center">
          <div className="text-5xl mb-2">🎓</div>
          <div className="font-semibold">{user?.name}</div>
          <div className="text-sm text-zinc-500">Уровень 1</div>
          <div className="mt-2 text-lg font-bold text-yellow-500">{totalXp} XP</div>
        </div>
        <div className="card p-4">
          <div className="flex items-center justify-between mb-1">
            <h2 className="font-semibold">Прогресс по стране: {selectedCountry?.flag_icon} {selectedCountry?.name}</h2>
            <span className="text-sm font-medium">{completedQuests} / {totalQuests}</span>
          </div>
          <div className="w-full bg-zinc-200 dark:bg-zinc-700 rounded-full h-2.5">
            <div className="bg-blue-600 h-2.5 rounded-full" style={{ width: `${progressPercentage}%` }}></div>
          </div>
          <p className="text-xs text-zinc-500 mt-2">Выполнение квестов повышает ваш прогресс и опыт.</p>
        </div>
      </div>

      {/* --- ИЗМЕНЕНИЕ: Сетка адаптирована под 4 колонки на больших экранах --- */}
      <div className="grid sm:grid-cols-2 lg:grid-cols-4 gap-4">
        <Link
          href="/student/quests"
          className="card p-4 hover:bg-black/5 dark:hover:bg-white/5 transition h-[200px] flex flex-col justify-center text-center"
        >
          <div className="text-xl font-semibold mb-1">Мои Квесты ({totalQuests})</div>
          <div className="text-sm text-zinc-600 dark:text-zinc-300">Динамический список задач по стране.</div>
        </Link>
        <Link
          href="/student/kanban"
          className="card p-4 hover:bg-black/5 dark:hover:bg-white/5 transition h-[200px] flex flex-col justify-center text-center"
        >
          <div className="text-xl font-semibold mb-1">Kanban Доска</div>
          <div className="text-sm text-zinc-600 dark:text-zinc-300">Визуальное управление задачами.</div>
        </Link>
        {/* --- НОВОЕ: Добавлена карточка-ссылка на раздел "Мои Программы" --- */}
        <Link
          href="/student/programs"
          className="card p-4 hover:bg-black/5 dark:hover:bg-white/5 transition h-[200px] flex flex-col justify-center text-center"
        >
          <div className="text-xl font-semibold mb-1">Мои Программы</div>
          <div className="text-sm text-zinc-600 dark:text-zinc-300">Целевые университеты и их требования.</div>
        </Link>
        <Link
          href="/student/folder"
          className="card p-4 hover:bg-black/5 dark:hover:bg-white/5 transition h-[200px] flex flex-col justify-center text-center"
        >
          <div className="text-xl font-semibold mb-1">Моя Папка ({selectedCountry?.required_document_ids.length || 0})</div>
          <div className="text-sm text-zinc-600 dark:text-zinc-300">Чек-лист документов для выбранной страны.</div>
        </Link>
      </div>
    </div>
  );
}
--- END FILE: app/student/dashboard/page.tsx ---

--- BEGIN FILE: app/student/folder/page.tsx ---
"use client";
import { useCountry } from "@/app/shared/CountryContext";
import { useProgress } from "@/app/shared/ProgressContext";
import { useMemo } from "react";

export default function FolderPage() {
  const { documents, selectedCountry, quests } = useCountry();
  const { progress } = useProgress();

  const completedDocumentIds = useMemo(() => {
    const doneDocIds = new Set<number>();
    if (!selectedCountry) return doneDocIds;

    // 1. Получаем ID всех выполненных квестов
    const doneQuestIds = Object.keys(progress)
      .map(Number)
      .filter((questId) => progress[questId].status === "done");

    // 2. Находим, к каким документам эти квесты привязаны
    doneQuestIds.forEach((questId) => {
      const quest = quests.find((q) => q.id === questId);
      if (quest && quest.links_to_document_id) {
        doneDocIds.add(quest.links_to_document_id);
      }
    });
    return doneDocIds;
  }, [progress, quests, selectedCountry]);

  if (!selectedCountry) return null;

  const required = new Set(selectedCountry.required_document_ids);
  const filtered = documents.filter((d) => required.has(d.id) && completedDocumentIds.has(d.id));

  const handleDownload = () => {
    alert("Имитация скачивания архива. В реальном приложении здесь будет логика для создания и скачивания ZIP-файла.");
  };

  return (
    <div>
      <div className="flex items-center justify-between mb-6">
        <div>
          <h1 className="text-2xl font-semibold mb-2">Моя Папка</h1>
          <p className="text-zinc-600 dark:text-zinc-300">
            Здесь хранятся все готовые и проверенные документы.
          </p>
        </div>
        <button className="btn btn-primary" onClick={handleDownload} disabled={filtered.length === 0}>
          Скачать архивом
        </button>
      </div>
      {filtered.length === 0 ? (
        <div className="text-center py-10">
          <div className="text-4xl mb-3">🗂️</div>
          <p className="text-zinc-500">Папка пуста. Выполненные документы появятся здесь.</p>
        </div>
      ) : (
        <ul className="grid sm:grid-cols-2 md:grid-cols-3 gap-4">
          {filtered.map((d) => (
            <li key={d.id} className="card p-4 flex flex-col justify-between">
              <div>
                <div className="text-xs text-zinc-500">{d.category}</div>
                <div className="font-medium mt-1">{d.title}</div>
              </div>
              <div className="text-xs text-green-500 mt-3 font-semibold">Проверен</div>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}
--- END FILE: app/student/folder/page.tsx ---

--- BEGIN FILE: app/student/kanban/page.tsx ---
"use client";
import { useCountry, QuestTemplate } from "@/app/shared/CountryContext";
import { useProgress } from "@/app/shared/ProgressContext";
import { useState } from "react";
import QuestDetailModal from "../quests/QuestDetailModal";

const KanbanColumn = ({
  title,
  quests,
  onSelectQuest,
}: {
  title: string;
  quests: QuestTemplate[];
  onSelectQuest: (quest: QuestTemplate) => void;
}) => (
  <div className="flex-1">
    <h2 className="text-lg font-semibold mb-4 px-1">{title}</h2>
    <div className="space-y-3 h-[calc(100vh-18rem)] overflow-y-auto pr-2">
      {quests.map((q) => (
        <div
          key={q.id}
          onClick={() => onSelectQuest(q)}
          className="card p-4 transition hover:shadow-lg cursor-pointer bg-white dark:bg-zinc-800"
        >
          <div className="font-medium text-sm">{q.title}</div>
          <div className="text-xs text-yellow-500 font-bold mt-2">XP: {q.xp}</div>
        </div>
      ))}
    </div>
  </div>
);

export default function KanbanPage() {
  const { quests, selectedCountry } = useCountry();
  const { progress } = useProgress();
  const [selectedQuest, setSelectedQuest] = useState<QuestTemplate | null>(null);

  if (!selectedCountry) return null;

  const requiredIds = new Set(selectedCountry.required_quest_ids);
  const allQuests = quests.filter((q) => requiredIds.has(q.id));

  // --- ИЗМЕНЕНИЕ: Задачи, требующие правок, теперь тоже попадают в "To Do" ---
  const todoQuests = allQuests.filter(q => !progress[q.id] || progress[q.id]?.status === 'changes_requested');
  const onReviewQuests = allQuests.filter(q => progress[q.id]?.status === 'review');
  const doneQuests = allQuests.filter(q => progress[q.id]?.status === 'done');

  return (
    <>
      <div>
        <h1 className="text-2xl font-semibold mb-2">Kanban Доска</h1>
        <p className="text-zinc-600 dark:text-zinc-300 mb-6">
          Управляйте вашими задачами в удобном формате.
        </p>
        <div className="flex gap-6">
          <KanbanColumn
            title={`To Do (${todoQuests.length})`}
            quests={todoQuests}
            onSelectQuest={setSelectedQuest}
          />
          <KanbanColumn
            title={`On Review (${onReviewQuests.length})`}
            quests={onReviewQuests}
            onSelectQuest={setSelectedQuest}
          />
          <KanbanColumn
            title={`Done (${doneQuests.length})`}
            quests={doneQuests}
            onSelectQuest={setSelectedQuest}
          />
        </div>
      </div>
      {selectedQuest && (
        <QuestDetailModal quest={selectedQuest} onClose={() => setSelectedQuest(null)} />
      )}
    </>
  );
}
--- END FILE: app/student/kanban/page.tsx ---

--- BEGIN FILE: app/student/layout.tsx ---
"use client";
import "../globals.css";
import { useAuth } from "../shared/AuthContext";
import Sidebar from "../shared/Sidebar";
import { useRouter } from "next/navigation";
import { useEffect } from "react";

export default function StudentLayout({ children }: { children: React.ReactNode }) {
  const { user, loading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!loading && (!user || user.role !== "student")) {
      router.replace("/login");
    }
  }, [user, loading, router]);

  if (loading || !user) return <div className="min-h-screen bg-zinc-50 dark:bg-black flex items-center justify-center">Проверка доступа...</div>;

  return (
    <div className="min-h-screen bg-zinc-50 dark:bg-black">
      <div className="container py-6">
        <div className="grid grid-cols-1 sm:grid-cols-[16rem_1fr] gap-6">
          <Sidebar />
          <main className="card p-4">{children}</main>
        </div>
      </div>
    </div>
  );
}
--- END FILE: app/student/layout.tsx ---

--- BEGIN FILE: app/student/programs/ProgramDetailModal.tsx ---
"use client";
import { Program, useCountry } from "@/app/shared/CountryContext";

type Props = {
  program: Program;
  onClose: () => void;
};

export default function ProgramDetailModal({ program, onClose }: Props) {
  const { documents } = useCountry();
  const requiredDocs = documents.filter((d) => program.required_document_ids.includes(d.id));

  return (
    <div
      className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50"
      onClick={onClose}
    >
      <div className="w-full max-w-3xl card p-0 overflow-hidden" onClick={(e) => e.stopPropagation()}>
        {/* eslint-disable-next-line @next/next/no-img-element */}
        <img src={program.image_url} alt={program.title} className="w-full h-48 object-cover" />
        <div className="p-6">
          <div className="flex items-start justify-between">
            <div>
              <h2 className="text-xl font-semibold mb-1">{program.title}</h2>
              <p className="text-sm text-zinc-500 mb-4">Дедлайн подачи: <b>{program.deadline}</b></p>
            </div>
            <button onClick={onClose} className="text-2xl leading-none">&times;</button>
          </div>

          <div className="grid md:grid-cols-2 gap-6">
            <div>
              <h3 className="font-semibold mb-2">Требуемые документы:</h3>
              <ul className="list-disc list-inside text-sm space-y-1">
                {requiredDocs.map(doc => <li key={doc.id}>{doc.title}</li>)}
              </ul>
            </div>
            <div>
              <h3 className="font-semibold mb-2">Полезная ссылка:</h3>
              <a
                href={program.link}
                target="_blank"
                rel="noopener noreferrer"
                className="text-sm text-blue-500 hover:underline break-words"
              >
                Официальная страница программы
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
--- END FILE: app/student/programs/ProgramDetailModal.tsx ---

--- BEGIN FILE: app/student/programs/page.tsx ---
"use client";
import { Program, useCountry } from "@/app/shared/CountryContext";
import { useState } from "react";
import ProgramDetailModal from "./ProgramDetailModal";

export default function ProgramsPage() {
  const { universities, programs } = useCountry();
  const [selectedProgram, setSelectedProgram] = useState<Program | null>(null);

  return (
    <>
      <div>
        <h1 className="text-2xl font-semibold mb-2">Мои Программы</h1>
        <p className="text-zinc-600 dark:text-zinc-300 mb-6">
          Здесь собраны целевые университеты и их специфические требования.
        </p>
        <div className="space-y-8">
          {universities.map((uni) => {
            const uniPrograms = programs.filter(p => uni.program_ids.includes(p.id));
            return (
              <section key={uni.id}>
                <div className="flex items-center gap-3 mb-4">
                  <span className="text-2xl">{uni.logo_url}</span>
                  <h2 className="text-lg font-semibold">{uni.name}</h2>
                </div>
                <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
                  {uniPrograms.map((prog) => (
                    <button
                      key={prog.id}
                      onClick={() => setSelectedProgram(prog)}
                      className="card text-left p-0 overflow-hidden transition hover:shadow-xl w-full"
                    >
                      {/* eslint-disable-next-line @next/next/no-img-element */}
                      <img src={prog.image_url} alt={prog.title} className="w-full h-32 object-cover" />
                      <div className="p-4">
                        <div className="font-medium">{prog.title}</div>
                        <div className="text-xs text-zinc-500 mt-1">Дедлайн: {prog.deadline}</div>
                      </div>
                    </button>
                  ))}
                </div>
              </section>
            );
          })}
        </div>
      </div>

      {selectedProgram && (
        <ProgramDetailModal program={selectedProgram} onClose={() => setSelectedProgram(null)} />
      )}
    </>
  );
}
--- END FILE: app/student/programs/page.tsx ---

--- BEGIN FILE: app/student/quests/QuestDetailModal.tsx ---
// app/student/quests/QuestDetailModal.tsx

"use client";
import { useEffect, useRef, useState } from "react";
import { QuestTemplate } from "@/app/shared/CountryContext";
import { useProgress, ProgressItem } from "@/app/shared/ProgressContext";

type Props = {
  quest: QuestTemplate & {
    submission_type?: "none" | "text" | "link" | "file" | "credentials";
    submission_label?: string; // For simple types
    submission_fields?: { key: string; label: string }[]; // For complex types
  };
  onClose: () => void;
};

const MAX_FILE_SIZE_MB = 5;
const MAX_FILE_SIZE_BYTES = MAX_FILE_SIZE_MB * 1024 * 1024;

const UploadIcon = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    className="h-8 w-8 text-zinc-500"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
    strokeWidth={2}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"
    />
  </svg>
);

const renderInput = (
  type: Props["quest"]["submission_type"],
  fields: Props["quest"]["submission_fields"],
  value: string,
  onTextChange: (value: string) => void,
  onFileChange: (e: React.ChangeEvent<HTMLInputElement>) => void,
  fileInputRef?: React.RefObject<HTMLInputElement | null>
) => {
  switch (type) {
    case "text":
      return (
        <input
          type="text"
          className="w-full rounded-xl border px-4 py-2 bg-white dark:bg-zinc-800"
          value={value}
          onChange={(e) => onTextChange(e.target.value)}
        />
      );
    case "link":
      return (
        <input
          type="url"
          className="w-full rounded-xl border px-4 py-2 bg-white dark:bg-zinc-800"
          value={value}
          onChange={(e) => onTextChange(e.target.value)}
        />
      );
    case "file":
      return (
        <label className="w-full h-32 flex flex-col items-center justify-center border-2 border-dashed border-zinc-300 dark:border-zinc-600 rounded-xl cursor-pointer hover:bg-zinc-50 dark:hover:bg-zinc-800 transition">
          <UploadIcon />
          <span className="mt-2 text-sm text-zinc-600 dark:text-zinc-300">
            {value ? "Файл выбран" : "Нажмите, чтобы выбрать файл"}
          </span>
          <p className="text-xs text-zinc-400 mt-1">
            Убедитесь, что скан четкий и все данные видны
          </p>
          <input
            ref={fileInputRef}
            type="file"
            className="hidden"
            accept="application/pdf"
            onChange={onFileChange}
          />
        </label>
      );
    default:
      return null;
  }
};

export default function QuestDetailModal({ quest, onClose }: Props) {
  const { progress, submitQuest, uncompleteQuest, approveQuest } = useProgress();
  const [inputValue, setInputValue] = useState<any>(
    quest.submission_type === "credentials" ? {} : ""
  );
  const [validationError, setValidationError] = useState<string>("");
  const [isEditing, setIsEditing] = useState<boolean>(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const questProgress: ProgressItem | undefined = progress[quest.id];

  useEffect(() => {
    setIsEditing(false);
    const defaultValue = quest.submission_type === "credentials" ? {} : "";
    if (questProgress && questProgress.submission != null) {
      setInputValue(questProgress.submission ?? defaultValue);
    } else {
      setInputValue(defaultValue);
    }
  }, [quest.id, questProgress, quest.submission_type]);

  const isSubmitDisabled = () => {
    if (questProgress?.status === 'done') return true; // Всегда блокируем, если выполнено
    if (quest.submission_type === "none") return false;
    if (quest.submission_type === "credentials" && quest.submission_fields) {
      return quest.submission_fields.some((field) => !inputValue[field.key]);
    }
    if (validationError) return true;
    return !inputValue;
  };

  const handleSubmit = () => {
    if (isSubmitDisabled()) return;
    if (isEditing && questProgress) {
      uncompleteQuest(quest.id);
    }
    submitQuest(quest.id, inputValue);
    onClose();
  };

  const handleStartReplace = () => {
    setIsEditing(true);
    setValidationError("");
    setInputValue("");
    setTimeout(() => fileInputRef.current?.click(), 0);
  };

  const handleDelete = () => {
    if (!questProgress) return;
    const ok = confirm("Удалить прикреплённый файл? Это действие можно будет отменить только новой загрузкой.");
    if (!ok) return;
    uncompleteQuest(quest.id);
    setValidationError("");
    setInputValue("");
    setIsEditing(false);
  };

  const handleApprove = () => {
    approveQuest(quest.id);
    onClose();
  };

  const handleOpenFile = () => {
    if (typeof questProgress?.submission === "string") {
      alert(`Симуляция открытия файла: ${questProgress.submission}`);
    }
  };

  const handleCredentialChange = (key: string, value: string) => {
    setInputValue((prev: object) => ({ ...prev, [key]: value }));
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    setValidationError("");

    if (!file) {
      setInputValue("");
      return;
    }

    if (file.type !== "application/pdf") {
      setValidationError("Пожалуйста, выберите файл в формате PDF.");
      return;
    }

    if (file.size > MAX_FILE_SIZE_BYTES) {
      setValidationError(
        `Размер файла не должен превышать ${MAX_FILE_SIZE_MB} МБ. Вы можете сжать ваш PDF файл.`
      );
      return;
    }

    setInputValue(file.name);
  };

  const showSubmitBlockedOverlay =
    quest.submission_type === "credentials" && !!questProgress && !isEditing;

  return (
    <div
      className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50"
      onClick={onClose}
    >
      <div className="w-full max-w-2xl card p-6" onClick={(e) => e.stopPropagation()}>
        <div className="flex items-start justify-between">
          <h2 className="text-xl font-semibold mb-2">{quest.title}</h2>
          <button onClick={onClose} className="text-2xl leading-none">
            &times;
          </button>
        </div>
        <div className="flex items-center gap-4 text-sm text-zinc-500 mb-4">
          <span>
            Награда: <b className="text-yellow-500">{quest.xp} XP</b>
          </span>
          <span>
            Дедлайн: <b>{quest.deadline}</b>
          </span>
        </div>
        <div className="prose prose-zinc dark:prose-invert max-w-none text-zinc-700 dark:text-zinc-300 space-y-3">
          {quest.description.split("\n").map((line, index) => {
            if (line.trim() === "") return null;
            const boldRegex = /\*\*(.*?)\*\*/;
            const match = line.match(boldRegex);
            if (match) {
              const boldText = match[1];
              const remainingText = line.substring(match[0].length);
              return (
                <p key={index} className="!my-0">
                  <strong>{boldText}</strong>
                  {remainingText}
                </p>
              );
            }
            return (
              <p key={index} className="!my-0">
                {line}
              </p>
            );
          })}
        </div>

        <div className="mt-6 border-t pt-4">
          {/* --- НОВОЕ: Блок для отображения комментария от куратора --- */}
          {questProgress?.status === 'changes_requested' && questProgress.comment && (
            <div className="mb-4 p-3 rounded-xl bg-amber-500/10 border border-amber-500/20">
              <h4 className="font-semibold text-amber-700 dark:text-amber-400 text-sm">Комментарий куратора:</h4>
              <p className="text-xs text-amber-600 dark:text-amber-500 mt-1">
                {questProgress.comment}
              </p>
            </div>
          )}

          <h3 className="text-sm font-medium">Выполнение задачи</h3>

          {quest.submission_type === "credentials" ? (
            <div className="my-3 space-y-3 relative">
              {showSubmitBlockedOverlay && (
                <div className="absolute inset-0 bg-white/80 dark:bg-zinc-900/80 z-10" />
              )}
              {quest.submission_fields?.map((field) => (
                <div key={field.key}>
                  <label className="block text-xs text-zinc-500 mb-1">
                    {field.label}
                  </label>
                  <input
                    type={field.key.includes("password") ? "password" : "text"}
                    className="w-full rounded-xl border px-4 py-2 bg-white dark:bg-zinc-800"
                    value={inputValue[field.key] || ""}
                    onChange={(e) =>
                      handleCredentialChange(field.key, e.target.value)
                    }
                  />
                </div>
              ))}
              {questProgress && !isEditing && (
                <div className="absolute inset-0 flex items-center justify-center z-20">
                  <div className="text-center p-4 bg-zinc-100 dark:bg-zinc-800 rounded-xl">
                    <div className="font-semibold">Данные были отправлены</div>
                    <div className="text-xs text-zinc-500">
                      {typeof questProgress.submission === "object" &&
                      (questProgress.submission as any)?.email
                        ? `Email: ${(questProgress.submission as any).email}`
                        : "Форма отправлена на проверку"}
                    </div>
                  </div>
                </div>
              )}
            </div>
          ) : quest.submission_type === "file" && questProgress && !isEditing ? (
            <div className="my-3 text-center">
              <p className="text-sm text-zinc-600 dark:text-zinc-300 mb-3">
                Вы загрузили файл: <b>{questProgress.submission}</b>
              </p>
              <div className="flex items-center justify-center gap-2">
                <button className="btn btn-primary" onClick={handleOpenFile}>
                  Открыть файл
                </button>
                {/* --- ИЗМЕНЕНИЕ: Скрываем кнопки, если статус 'done' --- */}
                {questProgress.status !== 'done' && (
                  <>
                    <button className="btn bg-amber-500/10 text-amber-600" onClick={handleStartReplace}>
                      Заменить файл
                    </button>
                    <button className="btn bg-red-500/10 text-red-600" onClick={handleDelete}>
                      Удалить файл
                    </button>
                  </>
                )}
              </div>
            </div>
          ) : quest.submission_type !== "none" ? (
            <div className="my-3">
              {quest.submission_label && (
                <label className="block text-xs text-zinc-500 mb-1">
                  {quest.submission_label}
                </label>
              )}
              {renderInput(
                quest.submission_type,
                quest.submission_fields,
                inputValue,
                setInputValue,
                handleFileChange,
                fileInputRef
              )}
              {quest.submission_type === "file" && inputValue && (
                <p className="text-xs text-zinc-500 mt-2 text-center">
                  Выбранный файл: <b>{inputValue}</b>
                </p>
              )}
              {validationError && (
                <div className="text-xs text-red-500 mt-2 text-center">
                  {validationError}
                  {validationError.includes("сжать") && (
                    <a
                      href="https://www.ilovepdf.com/ru/compress_pdf"
                      target="_blank"
                      rel="noopener noreferrer"
                      className="underline ml-1 font-semibold"
                    >
                      здесь.
                    </a>
                  )}
                </div>
              )}
              {isEditing && quest.submission_type === "file" && (
                <div className="flex justify-center mt-3">
                  <button
                    className="btn bg-zinc-200 dark:bg-zinc-700"
                    onClick={() => {
                      setIsEditing(false);
                      setInputValue("");
                      setValidationError("");
                    }}
                  >
                    Отмена
                  </button>
                </div>
              )}
            </div>
          ) : (
            <p className="text-xs text-zinc-500 my-3">
              Для этого квеста достаточно просто отметить его выполнение.
            </p>
          )}

          <div className="flex items-center gap-3 mt-2">
            <button
              onClick={handleSubmit}
              disabled={isSubmitDisabled() || (!!questProgress && !isEditing)}
              className="flex-1 btn btn-primary disabled:bg-zinc-200 dark:disabled:bg-zinc-700 disabled:cursor-not-allowed"
            >
              {questProgress?.status === 'changes_requested'
                ? 'Отправить повторно'
                : questProgress?.status === 'done'
                ? "Задача выполнена"
                : questProgress && !isEditing
                ? "Отправлено на проверку"
                : "Отправить на проверку" }
            </button>
            {/* --- ИЗМЕНЕНИЕ: Скрываем кнопку повторной отправки, если статус 'done' --- */}
            {questProgress && questProgress.status !== 'done' && (
              <button
                onClick={() => {
                  if (quest.submission_type === "file") {
                    handleStartReplace();
                  } else if (quest.submission_type === "credentials") {
                    uncompleteQuest(quest.id);
                    setInputValue({});
                  } else {
                    uncompleteQuest(quest.id);
                    setInputValue("");
                  }
                }}
                className="btn bg-red-500/10 text-red-500"
              >
                {quest.submission_type === "file"
                  ? "Заменить файл"
                  : quest.submission_type === "credentials"
                  ? "Изменить данные"
                  : "Отправить заново"}
              </button>
            )}
          </div>

          {questProgress?.status === "review" && (
            <p className="text-xs text-zinc-500 mt-3 text-center">
              Ваша задача на проверке у куратора. После одобрения она переместится в
              "Done".
            </p>
          )}
          {questProgress?.status === "done" && (
            <p className="text-xs text-zinc-500 mt-3 text-center">
              Задача выполнена и одобрена.
            </p>
          )}
        </div>
      </div>
    </div>
  );
}
--- END FILE: app/student/quests/QuestDetailModal.tsx ---

--- BEGIN FILE: app/student/quests/page.tsx ---
"use client";
import { useCountry } from "@/app/shared/CountryContext";
import { QuestTemplate } from "@/app/shared/CountryContext";
import { useProgress } from "@/app/shared/ProgressContext";
import { useState } from "react";
import QuestDetailModal from "./QuestDetailModal";

export default function QuestsPage() {
  const { quests, selectedCountry } = useCountry();
  const { progress } = useProgress();
  const [selectedQuest, setSelectedQuest] = useState<QuestTemplate | null>(null);

  if (!selectedCountry) return null;

  const required = new Set(selectedCountry.required_quest_ids);
  const filtered = quests.filter((q) => required.has(q.id));
  const byStage = filtered.reduce<Record<string, typeof filtered>>((acc, q) => {
    acc[q.stage] = acc[q.stage] || [];
    acc[q.stage].push(q);
    return acc;
  }, {});

  return (
    <>
      <div>
        <h1 className="text-2xl font-semibold mb-2">Мои Квесты</h1>
        <p className="text-zinc-600 dark:text-zinc-300 mb-6">
          Список задач формируется на основе профиля страны.
        </p>
        <div className="space-y-6">
          {Object.entries(byStage).map(([stage, items]) => (
            <section key={stage}>
              <h2 className="text-lg font-semibold mb-3">{stage}</h2>
              <ul className="grid sm:grid-cols-2 gap-3">
                {items.map((q) => {
                  const questProgress = progress[q.id];
                  const isDone = questProgress?.status === 'done';
                  const isReview = questProgress?.status === 'review';

                  return (
                    <li
                      key={q.id}
                      className="card p-4 transition hover:shadow-lg cursor-pointer"
                      onClick={() => setSelectedQuest(q)}
                    >
 <div className="flex items-start justify-between gap-4">
  <div>
 <div className={`font-medium ${isDone ? 'line-through text-zinc-500' : ''}`}>{q.title}</div>
 <div className="text-xs text-yellow-500 font-bold mt-1">XP: {q.xp}</div>
  </div>
 {isDone ? <div className="text-2xl" title="Выполнено">✅</div> :
  isReview ? <div className="text-2xl" title="На проверке">⏳</div> :
  <button className="btn btn-primary text-xs">Детали</button>}
 </div>
                    </li>
                  ); 
                })}
              </ul>
            </section>
          ))}
        </div>
      </div>
      {selectedQuest && (
        <QuestDetailModal quest={selectedQuest} onClose={() => setSelectedQuest(null)} />
      )}
    </>
  );
}
--- END FILE: app/student/quests/page.tsx ---

--- BEGIN FILE: eslint.config.mjs ---
import { defineConfig, globalIgnores } from "eslint/config";
import nextVitals from "eslint-config-next/core-web-vitals";
import nextTs from "eslint-config-next/typescript";

const eslintConfig = defineConfig([
  ...nextVitals,
  ...nextTs,
  // Override default ignores of eslint-config-next.
  globalIgnores([
    // Default ignores of eslint-config-next:
    ".next/**",
    "out/**",
    "build/**",
    "next-env.d.ts",
  ]),
]);

export default eslintConfig;
--- END FILE: eslint.config.mjs ---

--- BEGIN FILE: mock/countries.json ---
[
  {
    "id": "at",
    "name": "Австрия",
    "flag_icon": "🇦🇹",
    "required_document_ids": [101, 102, 201, 202, 203, 301, 302, 303, 401, 501, 502, 503, 504],
    "required_quest_ids": [1, 2, 10, 11, 12, 13, 20, 30]
  },
  {
    "id": "it",
    "name": "Италия",
    "flag_icon": "🇮🇹",
    "required_document_ids": [101, 102, 201, 202, 203, 301, 302, 303, 401, 402, 501, 502, 503, 504],
    "required_quest_ids": [1, 2, 10, 11, 12, 13, 20, 21, 30]
  }
]
--- END FILE: mock/countries.json ---

--- BEGIN FILE: mock/document_templates.json ---
[
  { "id": 101, "category": "Личные данные", "title": "Загранпаспорт (главный разворот)" },
  { "id": 102, "category": "Личные данные", "title": "Фотография (как на паспорт)" },

  { "id": 201, "category": "Образование: Школа (9 классов)", "title": "Оригинал аттестата с приложением" },
  { "id": 202, "category": "Образование: Школа (9 классов)", "title": "Апостиль на аттестат" },
  { "id": 203, "category": "Образование: Школа (9 классов)", "title": "Нотариально заверенный перевод аттестата с апостилем" },

  { "id": 301, "category": "Образование: Колледж", "title": "Оригинал диплома с приложением" },
  { "id": 302, "category": "Образование: Колледж", "title": "Апостиль на диплом" },
  { "id": 303, "category": "Образование: Колледж", "title": "Нотариально заверенный перевод диплома с апостилем" },

  { "id": 401, "category": "Язык и Экзамены", "title": "Сертификат IELTS Academic" },
  { "id": 402, "category": "Язык и Экзамены", "title": "Результаты экзамена TOLC-I" },

  { "id": 501, "category": "Творческие документы", "title": "Резюме (CV)" },
  { "id": 502, "category": "Творческие документы", "title": "Мотивационное письмо (общий шаблон)" },
  { "id": 503, "category": "Творческие документы", "title": "Рекомендательное письмо #1" },
  { "id": 504, "category": "Творческие документы", "title": "Рекомендательное письмо #2" }
]
--- END FILE: mock/document_templates.json ---

--- BEGIN FILE: mock/programs.json ---
[
  {
    "id": 1001,
    "title": "Бакалавр: Компьютерные науки",
    "university_id": "tu_wien",
    "deadline": "2026-02-15",
    "link": "https://www.tuwien.at/en/studies/admission/bachelors-programmes-with-selection-procedure-or-entrance-exam/computer-sciences/",
    "image_url": "https://www.educationcenter.cz/assets/images/ru/blog/vsyo-chto-nuzhno-znat-o-venskom-tehnicheskom-universitete-TU-Wien/vsyo-chto-nuzhno-znat-o-venskom-tehnicheskom-universitete-TU-Wien.jpg",
    "required_document_ids": [501, 502, 503]
  },
  {
    "id": 1002,
    "title": "Бакалавр: Архитектура",
    "university_id": "tu_wien",
    "deadline": "2026-03-01",
    "link": "https://www.tuwien.at/en/studies/studies/bachelors-programmes/architecture-033-243/",
    "image_url": "https://www.educationcenter.cz/assets/images/ru/blog/vsyo-chto-nuzhno-znat-o-venskom-tehnicheskom-universitete-TU-Wien/vsyo-chto-nuzhno-znat-o-venskom-tehnicheskom-universitete-TU-Wien.jpg",
    "required_document_ids": [501, 502, 504]
  },
  {
    "id": 2001,
    "title": "Bachelor: Genomics",
    "university_id": "unibo",
    "deadline": "2026-04-10",
    "link": "https://www.unibo.it/en/teaching/course-unit-catalogue/course-unit/2023/46231",
    "image_url": "https://static.tildacdn.pro/tild3530-6661-4735-b266-323538636333/9873e9ee7f00010176f0.jpg",
    "required_document_ids": [501, 502, 402]
  }
]
--- END FILE: mock/programs.json ---

--- BEGIN FILE: mock/quest_templates.json ---
[
  {
    "id": 1,
    "stage": "Подготовка",
    "title": "Создать специальную почту Gmail",
    "xp": 20,
    "description": "Создайте новый аккаунт Gmail специально для поступления. Используйте имя и фамилию как в загранпаспорте. Это поможет избежать путаницы и потери важных писем от университетов и визовых центров.",
    "deadline": "2025-11-10",
    "links_to_document_id": null,
    "submission_type": "credentials",
    "submission_fields": [
      { "key": "email", "label": "Логин (email)" },
      { "key": "password", "label": "Пароль" }
    ]
  },
  {
    "id": 2,
    "stage": "Подготовка",
    "title": "Создать папку в облаке и настроить резервные копии",
    "xp": 20,
    "description": "Ваш цифровой архив — залог спокойствия. План действий:\n\n1. **Выберите сервис:** Google Drive или Dropbox отлично подойдут.\n2. **Создайте главную папку:** Назовите ее, например, «Документы для поступления 2026».\n3. **Организуйте структуру:** Внутри создайте подпапки: «Паспорт», «Образование», «Сертификаты», «Фото» и т.д. Это сэкономит вам массу времени в будущем.",
    "deadline": "2025-10-30",
    "links_to_document_id": null,
    "submission_type": "link",
    "submission_label": "Ссылка на папку в облаке"
  },
  {
    "id": 10,
    "stage": "Личные документы",
    "title": "Сфотографировать и загрузить загранпаспорт",
    "xp": 30,
    "description": "Сделайте качественный цветной скан или фотографию главного разворота вашего загранпаспорта. Убедитесь, что все данные хорошо читаемы, нет бликов и пальцев в кадре.",
    "deadline": "2025-11-20",
    "links_to_document_id": 101,
    "submission_type": "file",
    "submission_label": "Файл загранпаспорта"
  },
  {
    "id": 11,
    "stage": "Личные документы",
    "title": "Сделать фото как на паспорт",
    "xp": 30,
    "description": "Сделайте цифровую фотографию паспортного формата (обычно 3.5x4.5 см) на светлом фоне. Она понадобится для анкет и студенческого билета.",
    "deadline": "2025-11-25",
    "links_to_document_id": 102,
    "submission_type": "file",
    "submission_label": "Файл с фотографией"
  },
  {
    "id": 12,
    "stage": "Личные документы",
    "title": "Собрать школьные документы с апостилем и переводом",
    "xp": 50,
    "description": "Это многоступенчатый квест, который требует последовательности. Вот ваш план действий:\n\n**1. Подготовка оригинала:** Убедитесь, что у вас на руках есть оригинал школьного аттестата и приложение с оценками.\n**2. Проставление Апостиля:** Обратитесь в региональный Департамент (или Министерство) Образования. Именно они уполномочены ставить апостиль на образовательные документы. Уточните их график приема и необходимые документы (обычно паспорт и заявление).\n**3. Нотариальный перевод:** После получения документа с апостилем, найдите присяжного или аккредитованного переводчика. Важно, чтобы перевод был выполнен профессионалом, а затем нотариально заверен. Переводится как сам документ, так и штамп апостиля.",
    "deadline": "2025-12-15",
    "links_to_document_id": 201,
    "submission_type": "file",
    "submission_label": "PDF-файл аттестата с апостилем и переводом"
  },
  {
    "id": 13,
    "stage": "Личные документы",
    "title": "Собрать документы колледжа с апостилем и переводом",
    "xp": 50,
    "description": "Процесс для диплома колледжа или техникума полностью повторяет квест со школьным аттестатом. План действий тот же:\n\n**1. Подготовка оригинала:** Возьмите оригинал диплома и приложение к нему.\n**2. Проставление Апостиля:** Найдите ваш региональный Департамент (Министерство) Образования. Они поставят апостиль на диплом, подтвердив его легальность для использования за границей.\n**3. Нотариальный перевод:** С готовым апостилем обратитесь к аккредитованному переводчику для выполнения нотариально заверенного перевода на язык целевой страны.",
    "deadline": "2025-12-15",
    "links_to_document_id": 301,
    "submission_type": "file",
    "submission_label": "PDF-файл диплома с апостилем и переводом"
  },
  {
    "id": 20,
    "stage": "Экзамены",
    "title": "Зарегистрироваться и сдать IELTS Academic",
    "xp": 80,
    "description": "Это важный экзамен, подтверждающий ваше владение английским языком. План действий:\n\n**1. Поиск центра:** Найдите официальный центр сдачи IELTS в вашем городе (например, на сайтах British Council или IDP).\n**2. Регистрация:** Выберите тип экзамена 'Academic' и зарегистрируйтесь на удобную для вас дату. Места могут заканчиваться, поэтому делайте это заранее.\n**3. Подготовка:** Используйте официальные материалы для подготовки, чтобы ознакомиться с форматом и типами заданий. Цельтесь в балл не ниже 6.5, если иное не указано университетом.",
    "deadline": "2026-01-30",
    "links_to_document_id": 401,
    "submission_type": "file",
    "submission_label": "Сертификат IELTS"
  },
  {
    "id": 21,
    "stage": "Экзамены",
    "title": "Зарегистрироваться и сдать экзамен TOLC-I",
    "xp": 100,
    "description": "TOLC-I — это ключ к инженерным и научным факультетам в Италии. Ваш план:\n\n**1. Регистрация на CISIA:** Зайдите на официальный сайт CISIA Online, создайте аккаунт и выберите тип теста 'TOLC-I'.\n**2. Выбор даты и формата:** Вы можете выбрать сдачу онлайн (TOLC@CASA) или в аккредитованном центре. Выберите удобный слот.\n**3. Изучение структуры:** Экзамен состоит из секций: Математика, Логика, Науки и Понимание текста. Ознакомьтесь с темами и примерами заданий на сайте CISIA, чтобы эффективно подготовиться.",
    "deadline": "2026-02-20",
    "links_to_document_id": 402,
    "submission_type": "file",
    "submission_label": "Результаты TOLC-I"
  },
  {
    "id": 30,
    "stage": "Творческие документы",
    "title": "Подготовить CV и мотивационное письмо",
    "xp": 60,
    "description": "Эти документы — ваше лицо перед приемной комиссией. Следуйте этому плану:\n\n**1. Резюме (CV):** Используйте стандартный европейский формат 'Europass'. Это онлайн-конструктор, который поможет вам правильно структурировать информацию: образование, опыт работы (если есть), навыки, языки.\n**2. Мотивационное письмо:** Напишите универсальный шаблон (около 500 слов), где вы рассказываете о себе, своих академических целях и почему вы выбрали эту специальность. Этот шаблон вы будете адаптировать под требования каждого конкретного университета.",
    "deadline": "2026-02-10",
    "links_to_document_id": 501,
    "submission_type": "file",
    "submission_label": "Файл с CV и письмом"
  }
]
--- END FILE: mock/quest_templates.json ---

--- BEGIN FILE: mock/student_progress.json ---
{
  "1": {
    "1": { "status": "done", "submission": { "email": "artem.g@example.com", "password": "..." } },
    "2": { "status": "review", "submission": "https://link-to-drive.com" },
    "10": { "status": "done", "submission": "passport_artem.pdf" },
    "11": { "status": "done", "submission": "photo_artem.jpg" },
    "21": { "status": "done", "submission": "tolc_results.pdf" }
  },
  "2": {
    "1": { "status": "done", "submission": { "email": "veronika.s@example.com", "password": "..." } },
    "10": { "status": "review", "submission": "passport_veronika.pdf" },
    "12": { "status": "done", "submission": "school_docs_veronika.pdf" }
  },
  "3": {
     "1": { "status": "review", "submission": { "email": "ivan.p@example.com", "password": "..." } }
  }
}
--- END FILE: mock/student_progress.json ---

--- BEGIN FILE: mock/students.json ---
[
  {
    "id": 1,
    "name": "Артём Ганеев",
    "email": "artem.g@example.com",
    "country_id": "it",
    "gpa": 4.04,
    "ielts_score": 6.0,
    "selected_program_ids": [1001, 2001]
  },
  {
    "id": 2,
    "name": "Вероника Смирнова",
    "email": "veronika.s@example.com",
    "country_id": "at",
    "gpa": 4.5,
    "ielts_score": 6.5,
    "selected_program_ids": [1001, 1002]
  },
  {
    "id": 3,
    "name": "Иван Петров",
    "email": "ivan.p@example.com",
    "country_id": "at",
    "gpa": 3.8,
    "ielts_score": 5.5,
    "selected_program_ids": [1002]
  }
]
--- END FILE: mock/students.json ---

--- BEGIN FILE: mock/universities.json ---
[
  {
    "id": "tu_wien",
    "name": "Венский технический университет (TU Wien)",
    "logo_url": "🎓",
    "program_ids": [1001, 1002]
  },
  {
    "id": "unibo",
    "name": "Болонский университет (Università di Bologna)",
    "logo_url": "🏛️",
    "program_ids": [2001]
  }
]
--- END FILE: mock/universities.json ---

--- BEGIN FILE: mock/university_profiles.json ---
[
  {
    "universityId": "tu_wien",
    "countryId": "at",
    "assignedQuests": [
      {
        "id": 1,
        "stage": "Подготовка",
        "title": "Создать специальную почту Gmail",
        "xp": 20,
        "description": "Создайте новый аккаунт Gmail специально для поступления. Используйте имя и фамилию как в загранпаспорте."
      },
      {
        "id": 10,
        "stage": "Личные документы",
        "title": "Сфотографировать и загрузить загранпаспорт",
        "xp": 30,
        "description": "Сделайте качественный цветной скан или фотографию главного разворота вашего загранпаспорта."
      }
    ]
  },
  {
    "universityId": "unibo",
    "countryId": "it",
    "assignedQuests": [
      {
        "id": 1,
        "stage": "Подготовка",
        "title": "Создать специальную почту Gmail",
        "xp": 20,
        "description": "Создайте новый аккаунт Gmail специально для поступления. Используйте имя и фамилию как в загранпаспорте."
      },
      {
        "id": 21,
        "stage": "Экзамены",
        "title": "Сдать экзамен TOLC-I (для Болоньи)",
        "xp": 120,
        "description": "TOLC-I — это ключ к инженерным и научным факультетам в Италии. Для Болонского университета требуется особый подход к подготовке."
      }
    ]
  }
]
--- END FILE: mock/university_profiles.json ---

--- BEGIN FILE: next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />
import "./.next/dev/types/routes.d.ts";

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.
--- END FILE: next-env.d.ts ---

--- BEGIN FILE: next.config.ts ---
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;
--- END FILE: next.config.ts ---

--- BEGIN FILE: package.json ---
{
  "name": "my-abiturient",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --webpack",
    "build": "next build --webpack",
    "start": "next start",
    "lint": "eslint"
  },
  "dependencies": {
    "react": "19.2.0",
    "react-dom": "19.2.0",
    "next": "16.0.0"
  },
  "devDependencies": {
    "typescript": "^5",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@tailwindcss/postcss": "^4",
    "tailwindcss": "^4",
    "eslint": "^9",
    "eslint-config-next": "16.0.0"
  }
}
--- END FILE: package.json ---

--- BEGIN FILE: postcss.config.mjs ---
const config = {
  plugins: {
    "@tailwindcss/postcss": {},
  },
};

export default config;
--- END FILE: postcss.config.mjs ---

--- BEGIN FILE: tsconfig.json ---
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "react-jsx",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    ".next/dev/types/**/*.ts",
    "**/*.mts",
    "mock/**/*.json"
  ],
  "exclude": ["node_modules"]
}
--- END FILE: tsconfig.json ---

--- BEGIN FILE: tz.md ---

# **Техническое Задание (ТЗ) v4.0: ОС "Applicant" (Мульти-страновая Адаптивная Система)**

**Версия:** 4.0 (Финальная концепция с динамической адаптацией под страну поступления)
**Дата:** 24.10.2025
**Принцип:** "Правильный квест для правильной цели"

## **1. Ключевые Сущности и Архитектура**

### **1.1. Новая Архитектура: Ядро Конфигурации**
Система строится вокруг **"Профилей Стран"**. Это наборы правил, которые определяют, какие квесты и документы нужны для каждой конкретной страны. Интерфейс студента будет **динамически перестраиваться** в зависимости от выбранной им страны.

### **1.2. Структура Данных (Mock JSON)**

```json
// --- Файл: /mock/countries.json (Профили Стран) ---
[
  {
    "id": "at",
    "name": "Австрия",
    "flag_icon": "🇦🇹",
    "required_document_ids": [101, 102, 201, 202, 203, 301, 302, 303, 401, 501, 502, 503, 504],
    "required_quest_ids": [1, 2, 10, 11, 12, 13, 20, 30]
  },
  {
    "id": "it",
    "name": "Италия",
    "flag_icon": "🇮🇹",
    "required_document_ids": [101, 102, 201, 202, 203, 301, 302, 303, 401, 402, 501, 502, 503, 504],
    "required_quest_ids": [1, 2, 10, 11, 12, 13, 20, 21, 30]
  }
]

// --- Файл: /mock/document_templates.json (Глобальная Библиотека Документов) ---
[
  {"id": 101, "category": "Личные", "title": "Загранпаспорт (главный разворот)"},
  {"id": 102, "category": "Личные", "title": "Фотография (как на паспорт)"},
  // ... все остальные документы
  {"id": 402, "category": "Экзамены", "title": "Результаты экзамена TOLC-I"}
]

// --- Файл: /mock/quest_templates.json (Глобальная Библиотека Квестов) ---
[
  {"id": 1, "stage": "Подготовка", "title": "Создать специальную почту Gmail", "xp": 20, "links_to_document_id": null},
  // ... все остальные квесты
  {"id": 21, "stage": "Экзамены", "title": "Зарегистрироваться и сдать экзамен TOLC-I", "xp": 100, "links_to_document_id": 402}
]
```

## **2. Пользовательский Путь Студента (Игрока)**

### **2.1. Первый Вход и Онбординг**
*   **Новый шаг:** После первого входа система задает один вопрос:
    > **"Добро пожаловать в Операцию 'Поступление'! Выберите основную страну, с которой мы начнем подготовку."**
*   **Компонент:** Выпадающий список со странами (`Австрия`, `Италия` и т.д.).
*   **Действие:** Выбор страны определяет, какой `CountryProfile` будет загружен по умолчанию.

### **2.2. Личный Кабинет Студента: "Адаптивный Штаб"**
*   **URL:** `/student/dashboard`
*   **Сайдбар Навигации (Обновленный):**
    *   **В самом верху:** Появляется переключатель стран.
        *   `ТЕКУЩАЯ ОПЕРАЦИЯ: [ 🇦🇹 Австрия ▼ ]`
        *   При клике открывается список доступных стран, позволяя студенту в любой момент "переключить" интерфейс и посмотреть требования для другой страны.
    *   **Остальные пункты меню без изменений:** `Главная`, `Мои Квесты`, `Мой Арсенал` и т.д.

### **2.3. Экран "Мои Квесты": Динамический Список Задач**
*   **URL:** `/student/quests`
*   **Логика:** Экран **динамически генерирует список квестов** на основе выбранной страны.
    1.  Система определяет активную страну (например, `Австрия`).
    2.  Берет из `countries.json` массив `required_quest_ids` для Австрии.
    3.  Из глобальной библиотеки `quest_templates.json` подгружает и отображает **только те квесты**, ID которых есть в этом массиве.
*   **Пример:**
    *   **Если выбрана 🇦🇹 Австрия:** Студент видит квесты по получению Апостиля, сдаче IELTS, написанию мотивационного письма. **Квеста про TOLC-I в списке НЕТ.**
    *   **Если студент переключается на 🇮🇹 Италию:** Страница перезагружается, и в списке квестов **появляется** `Квест: "Зарегистрироваться и сдать экзамен TOLC-I"`.

#### **Детализация Квестов (без изменений, но контент теперь динамический):**
*   **Структура:** Список разделов (`Этап 1: Подготовка`, `Этап 2: Личные Документы` и т.д.).
*   **Карточка Квеста:** При клике открывается модальное окно с описанием, чек-листом, наградой в XP и ссылкой на Базу Знаний.

### **2.4. Экран "Мой Арсенал": Адаптивный Чек-лист Документов**
*   **URL:** `/student/arsenal`
*   **Логика:** Аналогична экрану "Мои Квесты". Список документов генерируется **динамически**.
    1.  Система определяет активную страну (например, `Италия`).
    2.  Берет из `countries.json` массив `required_document_ids` для Италии.
    3.  Из глобальной библиотеки `document_templates.json` подгружает и отображает **только те документы**, которые требуются для поступления в Италию.
*   **Пример:**
    *   **Если выбрана 🇦🇹 Австрия:** В категории "Экзамены" будет только слот для `Сертификат IELTS Academic`.
    *   **Если студент переключается на 🇮🇹 Италию:** В категории "Экзамены" появляются **ДВА** слота: `Сертификат IELTS Academic` и `Результаты экзамена TOLC-I`.

#### **Структура Арсенала (основана на твоем полном кейсе):**

##### **Для страны: 🇦🇹 Австрия**
*   **Категория: "Личные данные"**
    1.  `Загранпаспорт (главный разворот)`: [ Слот для загрузки ]
    2.  `Фотография (как на паспорт)`: [ Слот для загрузки ]
*   **Категория: "Образование: Школа (9 классов)"**
    3.  `Оригинал аттестата с приложением`: [ Слот для загрузки ]
    4.  `Апостиль на аттестат`: [ Слот для загрузки ]
    5.  `Нотариально заверенный перевод аттестата с апостилем`: [ Слот для загрузки ]
*   **Категория: "Образование: Колледж"**
    6.  `Оригинал диплома с приложением`: [ Слот для загрузки ]
    7.  `Апостиль на диплом`: [ Слот для загрузки ]
    8.  `Нотариально заверенный перевод диплома с апостилем`: [ Слот для загрузки ]
*   **Категория: "Язык и Экзамены"**
    9.  `Сертификат IELTS Academic`: [ Слот для загрузки ]
*   **Категория: "Творческие документы"**
    10. `Резюме (CV)`: [ Слот для загрузки ]
    11. `Мотивационное письмо (общий шаблон)`: [ Слот для загрузки ]
    12. `Рекомендательное письмо #1`: [ Слот для загрузки ]
    13. `Рекомендательное письмо #2`: [ Слот для загрузки ]

##### **Для страны: 🇮🇹 Италия (показываются ТОЛЬКО отличия)**
*   **Категория: "Язык и Экзамены"**
    9.  `Сертификат IELTS Academic`: [ Слот для загрузки ]
    10. **(НОВЫЙ)** `Результаты экзамена TOLC-I`: [ Слот для загрузки ]
*   *Все остальные документы идентичны австрийским.*

## **3. Экраны Роли "Куратор" (Гейм-мастер)**

Интерфейс куратора также становится адаптивным.

### **3.1. Кабинет Студента (глазами Куратора)**
*   **Новый элемент:** Куратор видит, какая страна сейчас выбрана у студента в качестве основной.
*   **Адаптивное Управление:** Когда куратор заходит в разделы "Квесты" или "Арсенал" студента, он видит **тот же самый, отфильтрованный по стране список**, что и студент. Это гарантирует, что они оба работают с одним и тем же набором требований.

### **3.2. Новый Раздел для Куратора: "Конфигуратор Стран"**
*   **URL:** `/curator/admin/countries`
*   **Описание:** Это "мозг" всей системы. Здесь куратор (или администратор) управляет правилами для каждой страны. Это позволяет масштабировать бизнес без привлечения разработчиков.
*   **Функционал:**
    1.  **Список Стран:** Таблица со всеми доступными странами (`Австрия`, `Италия`). Кнопка `[ + Добавить страну ]`.
    2.  **Редактор Профиля Страны:** При клике на страну открывается редактор.
        *   **Название:** `Австрия`
        *   **Блок "Требуемые Документы":**
            *   Два списка: слева — "Все доступные документы в системе", справа — "Документы для Австрии".
            *   Куратор может перетаскивать документы между списками или использовать чек-боксы для добавления/удаления требований.
        *   **Блок "Требуемые Квесты":**
            *   Аналогичный интерфейс с двумя списками для управления квестами, необходимыми для этой страны.
        *   **Кнопка:** `[ Сохранить изменения ]`.

---

Эта версия ТЗ решает фундаментальную проблему бизнеса по сопровождению абитуриентов — **управление сложностью и разнообразием требований**. Мы создаем не жестко закодированный продукт, а **гибкую платформу**, которую Gerus Labs сможет самостоятельно настраивать и расширять, добавляя поддержку новых стран, университетов и типов виз.
--- END FILE: tz.md ---
