import os

# Структура: { 'путь_к_файлу': """содержимое_файла""" }
files_to_create = {
    "app/layout.tsx": """import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { CountryProvider } from "./shared/CountryContext";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <CountryProvider>
          {children}
        </CountryProvider>
      </body>
    </html>
  );
}
""",
    "app/globals.css": """@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}

/* utilities used by Student/Curator screens */
.container {
  @apply mx-auto px-4;
}
.card {
  @apply rounded-2xl shadow border border-black/5 dark:border-white/10 bg-white dark:bg-zinc-900;
}
.btn {
  @apply inline-flex items-center justify-center rounded-xl px-4 py-2 font-medium;
}
.btn-primary {
  @apply bg-black text-white dark:bg-white dark:text-black;
}
""",
    "app/page.tsx": """/* Onboarding: choose country and jump to /student/dashboard */
"use client";
import { useEffect, useMemo, useState } from "react";
import { useRouter } from "next/navigation";
import countriesBase from "@/mock/countries.json";

export default function Home() {
  const router = useRouter();
  const [countryId, setCountryId] = useState<string>("");
  const countries = useMemo(() => countriesBase, []);

  useEffect(() => {
    const saved = typeof window !== "undefined" ? localStorage.getItem("selectedCountryId") : null;
    if (saved) setCountryId(saved);
  }, []);

  const onStart = () => {
    const id = countryId || countries[0]?.id || "at";
    localStorage.setItem("selectedCountryId", id);
    router.replace("/student/dashboard");
  };

  return (
    <div className="min-h-screen bg-zinc-50 dark:bg-black flex items-center justify-center">
      <div className="w-full max-w-xl rounded-2xl shadow p-8 bg-white dark:bg-zinc-900">
        <h1 className="text-2xl font-semibold mb-3 text-zinc-900 dark:text-zinc-50">
          Добро пожаловать в Операцию «Поступление»
        </h1>
        <p className="text-zinc-600 dark:text-zinc-300 mb-6">
          Выберите основную страну, с которой начнём подготовку. Интерфейс и требования
          будут подстраиваться автоматически.
        </p>
        <label className="block text-sm mb-2 text-zinc-700 dark:text-zinc-200">Страна</label>
        <select
          className="w-full rounded-xl border px-4 py-2 bg-white dark:bg-zinc-800"
          value={countryId}
          onChange={(e) => setCountryId(e.target.value)}
        >
          {countries.map((c) => (
            <option key={c.id} value={c.id}>
              {c.flag_icon} {c.name}
            </option>
          ))}
        </select>
        <button
          onClick={onStart}
          className="mt-6 w-full rounded-2xl py-3 font-medium bg-black text-white dark:bg-white dark:text-black"
        >
          Начать
        </button>
      </div>
    </div>
  );
}
""",
    "app/shared/CountryContext.tsx": """"use client";
import React, { createContext, useContext, useEffect, useMemo, useState } from "react";
import baseCountries from "@/mock/countries.json";
import questTemplates from "@/mock/quest_templates.json";
import docTemplates from "@/mock/document_templates.json";

export type CountryProfile = {
  id: string;
  name: string;
  flag_icon: string;
  required_document_ids: number[];
  required_quest_ids: number[];
};

export type QuestTemplate = {
  id: number;
  stage: string;
  title: string;
  xp: number;
  links_to_document_id: number | null;
};

export type DocumentTemplate = {
  id: number;
  category: string;
  title: string;
};

type Ctx = {
  countries: CountryProfile[];
  selectedCountryId: string;
  setSelectedCountryId: (id: string) => void;
  selectedCountry: CountryProfile | undefined;
  quests: QuestTemplate[];
  documents: DocumentTemplate[];
};

const CountryCtx = createContext<Ctx | null>(null);

function readOverrides(): CountryProfile[] | null {
  if (typeof window === "undefined") return null;
  try {
    const raw = localStorage.getItem("countriesOverride");
    if (!raw) return null;
    const parsed = JSON.parse(raw);
    if (Array.isArray(parsed)) return parsed as CountryProfile[];
    return null;
  } catch {
    return null;
  }
}

export const CountryProvider: React.FC<React.PropsWithChildren> = ({ children }) => {
  const [countries, setCountries] = useState<CountryProfile[]>(baseCountries as CountryProfile[]);
  const [selectedCountryId, setSelectedCountryIdState] = useState<string>("");

  useEffect(() => {
    const override = readOverrides();
    if (override && override.length) setCountries(override);
    const saved = localStorage.getItem("selectedCountryId");
    setSelectedCountryIdState(saved || (override?.[0]?.id ?? (countries[0]?.id || "at")));
  }, []);

  const setSelectedCountryId = (id: string) => {
    setSelectedCountryIdState(id);
    if (typeof window !== "undefined") localStorage.setItem("selectedCountryId", id);
  };

  const selectedCountry = useMemo(
    () => countries.find((c) => c.id === selectedCountryId),
    [countries, selectedCountryId]
  );

  const value: Ctx = {
    countries,
    selectedCountryId,
    setSelectedCountryId,
    selectedCountry,
    quests: questTemplates as QuestTemplate[],
    documents: docTemplates as DocumentTemplate[],
  };

  return <CountryCtx.Provider value={value}>{children}</CountryCtx.Provider>;
};

export function useCountry() {
  const ctx = useContext(CountryCtx);
  if (!ctx) throw new Error("useCountry must be used within CountryProvider");
  return ctx;
}
""",
    "app/shared/Sidebar.tsx": """"use client";
import Link from "next/link";
import { usePathname } from "next/navigation";
import CountrySwitcher from "./CountrySwitcher";

const NavItem = ({ href, label }: { href: string; label: string }) => {
  const path = usePathname();
  const active = path === href;
  return (
    <Link
      href={href}
      className={`block px-4 py-2 rounded-xl transition ${
        active ? "bg-black text-white dark:bg-white dark:text-black" : "hover:bg-black/5 dark:hover:bg-white/10"
      }`}
    >
      {label}
    </Link>
  );
};

export default function Sidebar() {
  return (
    <aside className="w-full sm:w-64 shrink-0">
      <div className="card p-4">
        <div className="text-xs uppercase tracking-wide text-zinc-500 mb-2">Текущая операция</div>
        <CountrySwitcher />
      </div>
      <nav className="mt-4 card p-2 space-y-1">
        <NavItem href="/student/dashboard" label="Главная" />
        <NavItem href="/student/quests" label="Мои Квесты" />
        <NavItem href="/student/arsenal" label="Мой Арсенал" />
        <div className="h-px bg-black/5 dark:bg-white/10 my-2" />
        <NavItem href="/curator/admin/countries" label="Конфигуратор Стран" />
      </nav>
    </aside>
  );
}
""",
    "app/shared/CountrySwitcher.tsx": """"use client";
import { useCountry } from "./CountryContext";

export default function CountrySwitcher() {
  const { countries, selectedCountryId, setSelectedCountryId } = useCountry();
  return (
    <div className="flex items-center gap-2">
      <span className="text-xs text-zinc-500">Операция:</span>
      <select
        className="flex-1 rounded-xl border px-3 py-2 bg-white dark:bg-zinc-800"
        value={selectedCountryId}
        onChange={(e) => setSelectedCountryId(e.target.value)}
        aria-label="Переключатель страны"
      >
        {countries.map((c) => (
          <option key={c.id} value={c.id}>
            {c.flag_icon} {c.name}
          </option>
        ))}
      </select>
    </div>
  );
}
""",
    "app/student/layout.tsx": """import "../globals.css";
import Sidebar from "../shared/Sidebar";

export default function StudentLayout({ children }: { children: React.ReactNode }) {
  return (
    <div className="min-h-screen bg-zinc-50 dark:bg-black">
      <div className="container py-6">
        <div className="grid grid-cols-1 sm:grid-cols-[16rem_1fr] gap-6">
          <Sidebar />
          <main className="card p-4">{children}</main>
        </div>
      </div>
    </div>
  );
}
""",
    "app/student/dashboard/page.tsx": """"use client";
import { useCountry } from "@/app/shared/CountryContext";
import Link from "next/link";

export default function Dashboard() {
  const { selectedCountry } = useCountry();
  return (
    <div>
      <h1 className="text-2xl font-semibold mb-2">Адаптивный Штаб</h1>
      <p className="text-zinc-600 dark:text-zinc-300 mb-6">
        Система подстраивается под выбранную страну. Переключить страну можно в сайдбаре.
      </p>
      {selectedCountry && (
        <div className="mb-6">
          <div className="text-sm text-zinc-500">Текущий профиль</div>
          <div className="text-lg font-medium">{selectedCountry.flag_icon} {selectedCountry.name}</div>
        </div>
      )}
      <div className="grid sm:grid-cols-2 gap-4">
        <Link href="/student/quests" className="card p-4 hover:bg-black/5 dark:hover:bg-white/5 transition">
          <div className="text-xl font-semibold mb-1">Мои Квесты</div>
          <div className="text-sm text-zinc-600 dark:text-zinc-300">Динамический список задач по стране.</div>
        </Link>
        <Link href="/student/arsenal" className="card p-4 hover:bg-black/5 dark:hover:bg-white/5 transition">
          <div className="text-xl font-semibold mb-1">Мой Арсенал</div>
          <div className="text-sm text-zinc-600 dark:text-zinc-300">Чек-лист документов для выбранной страны.</div>
        </Link>
      </div>
    </div>
  );
}
""",
    "app/student/quests/page.tsx": """"use client";
import { useCountry } from "@/app/shared/CountryContext";

export default function QuestsPage() {
  const { quests, selectedCountry } = useCountry();
  if (!selectedCountry) return null;

  const required = new Set(selectedCountry.required_quest_ids);
  const filtered = quests.filter((q) => required.has(q.id));
  const byStage = filtered.reduce<Record<string, typeof filtered>>((acc, q) => {
    acc[q.stage] = acc[q.stage] || [];
    acc[q.stage].push(q);
    return acc;
  }, {});

  return (
    <div>
      <h1 className="text-2xl font-semibold mb-2">Мои Квесты</h1>
      <p className="text-zinc-600 dark:text-zinc-300 mb-6">
        Список задач формируется на основе профиля страны.
      </p>
      <div className="space-y-6">
        {Object.entries(byStage).map(([stage, items]) => (
          <section key={stage}>
            <h2 className="text-lg font-semibold mb-3">{stage}</h2>
            <ul className="grid sm:grid-cols-2 gap-3">
              {items.map((q) => (
                <li key={q.id} className="card p-4">
                  <div className="flex items-start justify-between gap-4">
                    <div>
                      <div className="font-medium">{q.title}</div>
                      <div className="text-xs text-zinc-500 mt-1">XP: {q.xp}</div>
                      {q.links_to_document_id && (
                        <div className="text-xs text-zinc-500 mt-1">
                          Связанный документ: #{q.links_to_document_id}
                        </div>
                      )}
                    </div>
                    <button className="btn btn-primary">Открыть</button>
                  </div>
                </li>
              ))}
            </ul>
          </section>
        ))}
      </div>
    </div>
  );
}
""",
    "app/student/arsenal/page.tsx": """"use client";
import { useCountry } from "@/app/shared/CountryContext";

export default function ArsenalPage() {
  const { documents, selectedCountry } = useCountry();
  if (!selectedCountry) return null;

  const required = new Set(selectedCountry.required_document_ids);
  const filtered = documents.filter((d) => required.has(d.id));
  const byCat = filtered.reduce<Record<string, typeof filtered>>((acc, d) => {
    acc[d.category] = acc[d.category] || [];
    acc[d.category].push(d);
    return acc;
  }, {});

  return (
    <div>
      <h1 className="text-2xl font-semibold mb-2">Мой Арсенал</h1>
      <p className="text-zinc-600 dark:text-zinc-300 mb-6">
        Документы, необходимые для поступления в выбранную страну.
      </p>
      <div className="space-y-6">
        {Object.entries(byCat).map(([cat, items]) => (
          <section key={cat}>
            <h2 className="text-lg font-semibold mb-3">{cat}</h2>
            <ul className="space-y-3">
              {items.map((d) => (
                <li key={d.id} className="card p-4 flex items-center justify-between gap-4">
                  <div>
                    <div className="font-medium">{d.title}</div>
                    <div className="text-xs text-zinc-500 mt-1">ID: {d.id}</div>
                  </div>
                  <button className="btn btn-primary">Загрузить</button>
                </li>
              ))}
            </ul>
          </section>
        ))}
      </div>
    </div>
  );
}
""",
    "app/curator/admin/countries/page.tsx": """"use client";
import { useEffect, useMemo, useState } from "react";
import baseCountries from "@/mock/countries.json";
import docs from "@/mock/document_templates.json";
import quests from "@/mock/quest_templates.json";
import type { CountryProfile } from "@/app/shared/CountryContext";

export default function CountriesConfigurator() {
  const [countries, setCountries] = useState<CountryProfile[]>(baseCountries as CountryProfile[]);
  const [currentId, setCurrentId] = useState<string>(countries[0]?.id || "at");
  const current = useMemo(() => countries.find((c) => c.id === currentId), [countries, currentId]);

  useEffect(() => {
    try {
      const raw = localStorage.getItem("countriesOverride");
      if (raw) {
        const parsed = JSON.parse(raw);
        if (Array.isArray(parsed)) {
          setCountries(parsed);
          if (parsed[0]?.id) setCurrentId(parsed[0].id);
        }
      }
    } catch {}
  }, []);

  const save = () => {
    localStorage.setItem("countriesOverride", JSON.stringify(countries));
    alert("Сохранено локально (mock). Перезагрузите студенческие страницы.");
  };

  const addCountry = () => {
    const id = prompt("ID страны (например, de):");
    const name = prompt("Название страны:");
    if (!id || !name) return;
    setCountries((prev) => [
      ...prev,
      { id, name, flag_icon: "🏳️", required_document_ids: [], required_quest_ids: [] },
    ]);
    setCurrentId(id);
  };

  const toggleId = (arr: number[], id: number, on: boolean) =>
    on ? Array.from(new Set([...arr, id])) : arr.filter((x) => x !== id);

  const setDoc = (id: number, on: boolean) => {
    if (!current) return;
    setCountries((prev) =>
      prev.map((c) =>
        c.id === current.id ? { ...c, required_document_ids: toggleId(c.required_document_ids, id, on) } : c
      )
    );
  };
  const setQuest = (id: number, on: boolean) => {
    if (!current) return;
    setCountries((prev) =>
      prev.map((c) =>
        c.id === current.id ? { ...c, required_quest_ids: toggleId(c.required_quest_ids, id, on) } : c
      )
    );
  };

  return (
    <div className="min-h-screen bg-zinc-50 dark:bg-black">
      <div className="container py-6">
        <div className="mb-4">
          <h1 className="text-2xl font-semibold">Конфигуратор Стран</h1>
          <p className="text-zinc-600 dark:text-zinc-300">
            Управляйте правилами для каждой страны. Изменения сохраняются в localStorage (mock).
          </p>
        </div>
        <div className="grid sm:grid-cols-[18rem_1fr] gap-6">
          <aside className="card p-3">
            <div className="flex items-center justify-between mb-2">
              <div className="font-medium">Страны</div>
              <button className="btn btn-primary" onClick={addCountry}>+ Добавить</button>
            </div>
            <ul className="space-y-1">
              {countries.map((c) => (
                <li key={c.id}>
                  <button
                    className={`w-full text-left px-3 py-2 rounded-lg ${
                      c.id === currentId ? "bg-black text-white dark:bg-white dark:text-black" : "hover:bg-black/5 dark:hover:bg-white/10"
                    }`}
                    onClick={() => setCurrentId(c.id)}
                  >
                    {c.flag_icon} {c.name} <span className="text-xs opacity-60">({c.id})</span>
                  </button>
                </li>
              ))}
            </ul>
          </aside>
          <main className="card p-4">
            {!current ? (
              <div>Выберите страну</div>
            ) : (
              <>
                <div className="mb-4">
                  <div className="text-sm text-zinc-500">Редактор профиля</div>
                  <div className="text-xl font-semibold">{current.flag_icon} {current.name}</div>
                </div>
                <div className="grid md:grid-cols-2 gap-6">
                  <section>
                    <h2 className="font-semibold mb-2">Требуемые Документы</h2>
                    <div className="h-[360px] overflow-auto border rounded-xl p-3">
                      {docs.map((d) => {
                        const on = current.required_document_ids.includes(d.id);
                        return (
                          <label key={d.id} className="flex items-center gap-3 py-1">
                            <input type="checkbox" checked={on} onChange={(e) => setDoc(d.id, e.target.checked)} />
                            <span className="text-sm">{d.category} — {d.title} <span className="text-xs text-zinc-500">#{d.id}</span></span>
                          </label>
                        );
                      })}
                    </div>
                  </section>
                  <section>
                    <h2 className="font-semibold mb-2">Требуемые Квесты</h2>
                    <div className="h-[360px] overflow-auto border rounded-xl p-3">
                      {quests.map((q) => {
                        const on = current.required_quest_ids.includes(q.id);
                        return (
                          <label key={q.id} className="flex items-center gap-3 py-1">
                            <input type="checkbox" checked={on} onChange={(e) => setQuest(q.id, e.target.checked)} />
                            <span className="text-sm">{q.stage} — {q.title} <span className="text-xs text-zinc-500">#{q.id}</span></span>
                          </label>
                        );
                      })}
                    </div>
                  </section>
                </div>
                <div className="mt-6">
                  <button className="btn btn-primary" onClick={save}>Сохранить изменения</button>
                </div>
              </>
            )}
          </main>
        </div>
      </div>
    </div>
  );
}
""",
}

def create_files():
    """Создает файлы и папки на основе словаря files_to_create."""
    for filepath, content in files_to_create.items():
        # Получаем директорию из пути к файлу
        directory = os.path.dirname(filepath)
        
        # Создаем директорию, если она не существует
        if directory:
            os.makedirs(directory, exist_ok=True)
            
        # Записываем содержимое в файл
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"Файл успешно создан/обновлен: {filepath}")
        except IOError as e:
            print(f"Ошибка при записи файла {filepath}: {e}")

if __name__ == "__main__":
    create_files()